using System;
using System.Threading.Tasks;
using AutoMapper;
using Eu.EDelivery.AS4.Common;
using Eu.EDelivery.AS4.Fe.SmpConfiguration;
using Eu.EDelivery.AS4.UnitTests.Common;
using Microsoft.EntityFrameworkCore;
using Newtonsoft.Json;
using Xunit;

namespace Eu.EDelivery.AS4.Fe.UnitTests
{
    public class SmpConfigurationServiceTest
    {
        private readonly SmpConfiguration.SmpConfiguration _smpConfiguration;

        public DatastoreContext DbContext { get; private set; }
        public DbContextOptions<DatastoreContext> Options { get; }
        public SmpConfigurationService SmpConfigurationService { get; private set; }
        public MapperConfiguration MapperConfig { get; }

        public SmpConfigurationServiceTest()
        {
            _smpConfiguration = new SmpConfiguration.SmpConfiguration
            {
                Action = "Action",
                EncryptAlgorithm = "EncryptAlgorithm",
                EncryptAlgorithmKeySize = 10,
                EncryptKeyDigestAlgorithm = "EncryptKeyDigestAlgorithm",
                EncryptKeyMgfAlorithm = "EncryptKeyMgfAlorithm",
                EncryptKeyTransportAlgorithm = "EncryptKeyTransportAlgorithm",
                EncryptPublicKeyCertificate = null,
                EncryptionEnabled = true,
                FinalRecipient = "FinalRecipient",
                PartyRole = "PartyRole",
                PartyType = "PartyType",
                ServiceType = "ServiceType",
                ServiceValue = "ServiceValue",
                TlsEnabled = true,
                ToPartyId = "ToPartyId",
                Url = "Url"
            };

            Options = new DbContextOptionsBuilder<DatastoreContext>()
                .UseInMemoryDatabase(Guid.NewGuid().ToString())
                .Options;

            using (var store = new DatastoreContext(Options, StubConfig.Default))
            {
                store.Database.EnsureCreated();
            }

            CreateNewDbContext();

            MapperConfig = new MapperConfiguration(cfg => { cfg.AddProfile(new SmpConfigurationAutoMapperProfile()); });

            CreateNewSmpConfigurationService();
        }

        protected SmpConfigurationServiceTest CreateNewDbContext()
        {
            DbContext = new DatastoreContext(Options, StubConfig.Default);
            return this;
        }

        protected SmpConfigurationServiceTest CreateNewSmpConfigurationService()
        {
            SmpConfigurationService = new SmpConfigurationService(DbContext, MapperConfig.CreateMapper());
            return this;
        }

        public class Create : SmpConfigurationServiceTest
        {
            [Fact]
            public async Task Creates_NewSmpConfiguration()
            {
                // Arrange
                await SmpConfigurationService.Create(_smpConfiguration);

                // Act
                var configurationFromDatabase = await DbContext.SmpConfigurations.FirstOrDefaultAsync();

                // Assert
                
                // Set the Id because this one is generated by the database and makes it possible to compare using JsonConvert
                _smpConfiguration.Id = configurationFromDatabase.Id;
                Assert.NotNull(configurationFromDatabase);
                Assert.Equal(JsonConvert.SerializeObject(_smpConfiguration),
                    JsonConvert.SerializeObject(configurationFromDatabase));
            }

            [Fact]
            public async Task ThrowsException_WhenParameterIsNull()
            {
                // Act / Assert
                await Assert.ThrowsAsync(typeof(ArgumentNullException), () => SmpConfigurationService.Create(null));
            }

            [Fact]
            public async Task ThrowsBusinessException_WhenKeyIsProvidedWithoutFileName()
            {
                // Arrange
                _smpConfiguration.EncryptPublicKeyCertificate = "fdsqfdsq";

                // Act
                var exception = await Assert.ThrowsAsync(typeof(BusinessException), () => SmpConfigurationService.Create(_smpConfiguration));

                // Assert
                Assert.Equal("EncryptPublicKeyCertificateName needs to be provided when EncryptPublicKeyCertificate is not empty!", exception.Message);
            }
        }

        public class Update : SmpConfigurationServiceTest
        {
            [Fact]
            public async Task ThrowsArgumentException_WhenIdIsInvalid()
            {
                // Act / Assert
                await Assert.ThrowsAsync(typeof(ArgumentException),
                    () => SmpConfigurationService.Update(0, new SmpConfiguration.SmpConfiguration()));
            }

            [Fact]
            public async Task ThrowsArgumentNullException_WhenSmpConfigurationIsNull()
            {
                // Act / Assert
                await Assert.ThrowsAsync(typeof(ArgumentNullException), () => SmpConfigurationService.Update(1, null));
            }

            [Fact]
            public async Task ThrowsNotFoundException_WhenSmpConfigurationDoesntExist()
            {
                // Act / Assert
                await Assert.ThrowsAsync(typeof(NotFoundException),
                    () => SmpConfigurationService.Update(int.MaxValue, _smpConfiguration));
            }

            [Fact]
            public async Task UpdatesExisting_WhenParametersAreValid()
            {
                // Arrange
                await SmpConfigurationService.Create(_smpConfiguration);
                var existingConfiguration = await DbContext.SmpConfigurations.FirstOrDefaultAsync();
                Assert.NotNull(existingConfiguration);

                existingConfiguration.Action = Guid.NewGuid().ToString();

                // Act
                await SmpConfigurationService.Update(existingConfiguration.Id, _smpConfiguration);

                // Assert
                var updatedFromDatabase = await DbContext.SmpConfigurations.FirstOrDefaultAsync(smpConfiguration =>
                    smpConfiguration.Id == existingConfiguration.Id);
                Assert.NotNull(updatedFromDatabase);

                Assert.Equal(JsonConvert.SerializeObject(existingConfiguration),
                    JsonConvert.SerializeObject(updatedFromDatabase));
            }

            [Fact]
            public async Task ThrowsBusinessException_WhenKeyIsProvidedWithoutFileName()
            {
                // Arrange
                var dbSmpConfiguration = await SmpConfigurationService.Create(_smpConfiguration);

                _smpConfiguration.EncryptPublicKeyCertificate = "fdsqfdsq";

                // Act
                var exception = await Assert.ThrowsAsync(typeof(BusinessException), () => SmpConfigurationService.Update(dbSmpConfiguration.Id, _smpConfiguration));

                // Assert
                Assert.Equal("EncryptPublicKeyCertificateName needs to be provided when EncryptPublicKeyCertificate is not empty!", exception.Message);
            }
        }

        public class Delete : SmpConfigurationServiceTest
        {
            [Fact]
            public async Task DeletesExisting_WithValidSmpConfiguration()
            {
                // Act
                await SmpConfigurationService.Create(_smpConfiguration);

                // Assert
                var smpConfigurationFromDatabase = await DbContext.SmpConfigurations.FirstOrDefaultAsync();
                Assert.NotNull(smpConfigurationFromDatabase);

                // Create new DbContext & SmpConfigurationService to make sure that the created SmpConfiguration entity is not in the context anymore
                await CreateNewDbContext()
                    .CreateNewSmpConfigurationService()
                    .SmpConfigurationService
                    .Delete(smpConfigurationFromDatabase.Id);

                var configurationCount = await DbContext.SmpConfigurations.CountAsync();
                Assert.Equal(0, configurationCount);
            }

            [Fact]
            public async Task ThrowsArgumentException_WhenIdIsInvalid()
            {
                // Act / Arrange
                await Assert.ThrowsAsync(typeof(ArgumentException), () => SmpConfigurationService.Delete(0));
            }

            [Fact]
            public async Task ThrowsNotFoundException_WhenSmpConfigurationDoesntExist()
            {
                // Act / Arrange
                await Assert.ThrowsAsync(typeof(NotFoundException), () => SmpConfigurationService.Delete(int.MaxValue));
            }
        }
    }
}