/**
 * @fileoverview This file is generated by the Angular 2 template compiler.
 * Do not edit.
 * @suppress {suspiciousCode,uselessCode,missingProperties}
 */
 /* tslint:disable */

import * as import0 from '../../../../../src/app/common/thumbprintInput/thumbprintInput.component';
import * as import1 from '@angular/core/src/change_detection/change_detection_util';
import * as import2 from '@angular/core/src/linker/view';
import * as import3 from '@angular/core/src/linker/view_utils';
import * as import4 from '@angular/core/src/render/api';
import * as import5 from '@angular/core/src/metadata/view';
import * as import6 from '@angular/core/src/linker/view_type';
import * as import7 from '@angular/core/src/change_detection/constants';
import * as import8 from '@angular/core/src/linker/component_factory';
import * as import9 from '@angular/forms/src/directives/control_container';
import * as import10 from '@angular/forms/src/directives/control_value_accessor';
import * as import11 from './thumbprintInput.component.scss.shim.ngstyle';
import * as import12 from '../tooltip.directive.ngfactory';
import * as import13 from '@angular/core/src/linker/view_container';
import * as import14 from '@angular/core/src/linker/element_ref';
import * as import15 from '../../../../../src/app/common/tooltip.directive';
import * as import16 from '../../../../node_modules/@angular/common/src/directives/ng_class.ngfactory';
import * as import17 from '../../../../node_modules/@angular/forms/src/directives/default_value_accessor.ngfactory';
import * as import18 from '../../../../node_modules/@angular/forms/src/directives/ng_model.ngfactory';
import * as import19 from '../../../../node_modules/@angular/forms/src/directives/ng_control_status.ngfactory';
import * as import20 from '../text.directive.ngfactory';
import * as import21 from '../../../../node_modules/@angular/common/src/directives/ng_if.ngfactory';
import * as import22 from '@angular/core/src/change_detection/differs/iterable_differs';
import * as import23 from '@angular/core/src/change_detection/differs/keyvalue_differs';
import * as import24 from '@angular/core/src/linker/template_ref';
import * as import25 from '@angular/common/src/directives/ng_class';
import * as import26 from '@angular/forms/src/directives/default_value_accessor';
import * as import27 from '@angular/forms/src/directives/ng_model';
import * as import28 from '@angular/forms/src/directives/ng_control';
import * as import29 from '@angular/forms/src/directives/ng_control_status';
import * as import30 from '../../../../../src/app/common/text.directive';
import * as import31 from '@angular/common/src/directives/ng_if';
export class Wrapper_ThumbprintInputComponent {
  /*private*/ _eventHandler:Function;
  context:import0.ThumbprintInputComponent;
  /*private*/ _changed:boolean;
  /*private*/ _expr_0:any;
  constructor(p0:any) {
    this._changed = false;
    this.context = new import0.ThumbprintInputComponent(p0);
    this._expr_0 = import1.UNINITIALIZED;
  }
  ngOnDetach(view:import2.AppView<any>,componentView:import2.AppView<any>,el:any):void {
  }
  ngOnDestroy():void {
  }
  check_formControlName(currValue:any,throwOnChange:boolean,forceUpdate:boolean):void {
    if ((forceUpdate || import3.checkBinding(throwOnChange,this._expr_0,currValue))) {
      this._changed = true;
      this.context.formControlName = currValue;
      this._expr_0 = currValue;
    }
  }
  ngDoCheck(view:import2.AppView<any>,el:any,throwOnChange:boolean):boolean {
    var changed:any = this._changed;
    this._changed = false;
    return changed;
  }
  checkHost(view:import2.AppView<any>,componentView:import2.AppView<any>,el:any,throwOnChange:boolean):void {
  }
  handleEvent(eventName:string,$event:any):boolean {
    var result:boolean = true;
    return result;
  }
  subscribe(view:import2.AppView<any>,_eventHandler:any):void {
    this._eventHandler = _eventHandler;
  }
}
var renderType_ThumbprintInputComponent_Host:import4.RenderComponentType = import3.createRenderComponentType('',0,import5.ViewEncapsulation.None,([] as any[]),{});
class View_ThumbprintInputComponent_Host0 extends import2.AppView<any> {
  _el_0:any;
  compView_0:import2.AppView<import0.ThumbprintInputComponent>;
  _ThumbprintInputComponent_0_3:Wrapper_ThumbprintInputComponent;
  __NG_VALUE_ACCESSOR_0_4:any[];
  constructor(viewUtils:import3.ViewUtils,parentView:import2.AppView<any>,parentIndex:number,parentElement:any) {
    super(View_ThumbprintInputComponent_Host0,renderType_ThumbprintInputComponent_Host,import6.ViewType.HOST,viewUtils,parentView,parentIndex,parentElement,import7.ChangeDetectorStatus.CheckAlways);
  }
  get _NG_VALUE_ACCESSOR_0_4():any[] {
    if ((this.__NG_VALUE_ACCESSOR_0_4 == null)) { (this.__NG_VALUE_ACCESSOR_0_4 = [this._ThumbprintInputComponent_0_3.context]); }
    return this.__NG_VALUE_ACCESSOR_0_4;
  }
  createInternal(rootSelector:string):import8.ComponentRef<any> {
    this._el_0 = import3.selectOrCreateRenderHostElement(this.renderer,'as4-thumbprint-input',import3.EMPTY_INLINE_ARRAY,rootSelector,(null as any));
    this.compView_0 = new View_ThumbprintInputComponent0(this.viewUtils,this,0,this._el_0);
    this._ThumbprintInputComponent_0_3 = new Wrapper_ThumbprintInputComponent(this.injectorGet(import9.ControlContainer,this.parentIndex));
    this.compView_0.create(this._ThumbprintInputComponent_0_3.context);
    this.init(this._el_0,((<any>this.renderer).directRenderer? (null as any): [this._el_0]),(null as any));
    return new import8.ComponentRef_<any>(0,this,this._el_0,this._ThumbprintInputComponent_0_3.context);
  }
  injectorGetInternal(token:any,requestNodeIndex:number,notFoundResult:any):any {
    if (((token === import0.ThumbprintInputComponent) && (0 === requestNodeIndex))) { return this._ThumbprintInputComponent_0_3.context; }
    if (((token === import10.NG_VALUE_ACCESSOR) && (0 === requestNodeIndex))) { return this._NG_VALUE_ACCESSOR_0_4; }
    return notFoundResult;
  }
  detectChangesInternal(throwOnChange:boolean):void {
    this._ThumbprintInputComponent_0_3.ngDoCheck(this,this._el_0,throwOnChange);
    this.compView_0.internalDetectChanges(throwOnChange);
  }
  destroyInternal():void {
    this.compView_0.destroy();
  }
  visitRootNodesInternal(cb:any,ctx:any):void {
    cb(this._el_0,ctx);
  }
}
export const ThumbprintInputComponentNgFactory:import8.ComponentFactory<import0.ThumbprintInputComponent> = new import8.ComponentFactory<import0.ThumbprintInputComponent>('as4-thumbprint-input',View_ThumbprintInputComponent_Host0,import0.ThumbprintInputComponent);
const styles_ThumbprintInputComponent:any[] = [import11.styles];
class View_ThumbprintInputComponent1 extends import2.AppView<any> {
  _el_0:any;
  _text_1:any;
  _el_2:any;
  _TooltipDirective_2_3:import12.Wrapper_TooltipDirective;
  _el_3:any;
  _text_4:any;
  /*private*/ _expr_6:any;
  constructor(viewUtils:import3.ViewUtils,parentView:import2.AppView<any>,parentIndex:number,parentElement:any,declaredViewContainer:import13.ViewContainer) {
    super(View_ThumbprintInputComponent1,renderType_ThumbprintInputComponent,import6.ViewType.EMBEDDED,viewUtils,parentView,parentIndex,parentElement,import7.ChangeDetectorStatus.CheckAlways,declaredViewContainer);
    this._expr_6 = import1.UNINITIALIZED;
  }
  createInternal(rootSelector:string):import8.ComponentRef<any> {
    this._el_0 = import3.createRenderElement(this.renderer,(null as any),'span',new import3.InlineArray2(2,'class','input-group-btn'),(null as any));
    this._text_1 = this.renderer.createText(this._el_0,'\n            ',(null as any));
    this._el_2 = import3.createRenderElement(this.renderer,this._el_0,'button',new import3.InlineArray4(4,'as4-tooltip','The input contains invalid characters, you can press this button to sanitize it','class','btn btn-danger'),(null as any));
    this._TooltipDirective_2_3 = new import12.Wrapper_TooltipDirective(this.renderer,new import14.ElementRef(this._el_2));
    this._el_3 = import3.createRenderElement(this.renderer,this._el_2,'i',new import3.InlineArray2(2,'class','fa fa-check'),(null as any));
    this._text_4 = this.renderer.createText(this._el_0,'\n        ',(null as any));
    var disposable_0:Function = import3.subscribeToRenderElement(this,this._el_2,new import3.InlineArray2(2,'click',(null as any)),this.eventHandler(this.handleEvent_2));
    this.init(this._el_0,((<any>this.renderer).directRenderer? (null as any): [
      this._el_0,
      this._text_1,
      this._el_2,
      this._el_3,
      this._text_4
    ]
    ),[disposable_0]);
    return (null as any);
  }
  injectorGetInternal(token:any,requestNodeIndex:number,notFoundResult:any):any {
    if (((token === import15.TooltipDirective) && ((2 <= requestNodeIndex) && (requestNodeIndex <= 3)))) { return this._TooltipDirective_2_3.context; }
    return notFoundResult;
  }
  detectChangesInternal(throwOnChange:boolean):void {
    const currVal_2_0_0:any = 'The input contains invalid characters, you can press this button to sanitize it';
    this._TooltipDirective_2_3.check_input(currVal_2_0_0,throwOnChange,false);
    this._TooltipDirective_2_3.ngDoCheck(this,this._el_2,throwOnChange);
    const currVal_6:any = this.parentView.context.isDisabled;
    if (import3.checkBinding(throwOnChange,this._expr_6,currVal_6)) {
      this.renderer.setElementProperty(this._el_2,'disabled',currVal_6);
      this._expr_6 = currVal_6;
    }
  }
  visitRootNodesInternal(cb:any,ctx:any):void {
    cb(this._el_0,ctx);
  }
  handleEvent_2(eventName:string,$event:any):boolean {
    this.markPathToRootAsCheckOnce();
    var result:boolean = true;
    if ((eventName == 'click')) {
      const pd_sub_0:any = ((<any>this.parentView.context.sanitize()) !== false);
      result = (pd_sub_0 && result);
    }
    return result;
  }
}
var renderType_ThumbprintInputComponent:import4.RenderComponentType = import3.createRenderComponentType('',0,import5.ViewEncapsulation.Emulated,styles_ThumbprintInputComponent,{});
export class View_ThumbprintInputComponent0 extends import2.AppView<import0.ThumbprintInputComponent> {
  _el_0:any;
  _text_1:any;
  _el_2:any;
  _NgClass_2_3:import16.Wrapper_NgClass;
  _DefaultValueAccessor_2_4:import17.Wrapper_DefaultValueAccessor;
  _NG_VALUE_ACCESSOR_2_5:any[];
  _NgModel_2_6:import18.Wrapper_NgModel;
  _NgControl_2_7:any;
  _NgControlStatus_2_8:import19.Wrapper_NgControlStatus;
  _TextDirective_2_9:import20.Wrapper_TextDirective;
  _text_3:any;
  _anchor_4:any;
  /*private*/ _vc_4:import13.ViewContainer;
  _TemplateRef_4_5:any;
  _NgIf_4_6:import21.Wrapper_NgIf;
  _text_5:any;
  _text_6:any;
  _map_17:any;
  constructor(viewUtils:import3.ViewUtils,parentView:import2.AppView<any>,parentIndex:number,parentElement:any) {
    super(View_ThumbprintInputComponent0,renderType_ThumbprintInputComponent,import6.ViewType.COMPONENT,viewUtils,parentView,parentIndex,parentElement,import7.ChangeDetectorStatus.CheckAlways);
    this._map_17 = import3.pureProxy1((p0:any):{[key: string]:any} => {
      return {'ng-invalid': p0};
    });
  }
  createInternal(rootSelector:string):import8.ComponentRef<any> {
    const parentRenderNode:any = this.renderer.createViewRoot(this.parentElement);
    this._el_0 = import3.createRenderElement(this.renderer,parentRenderNode,'div',new import3.InlineArray2(2,'class','input-group col-md-12'),(null as any));
    this._text_1 = this.renderer.createText(this._el_0,'\n        ',(null as any));
    this._el_2 = import3.createRenderElement(this.renderer,this._el_0,'input',new import3.InlineArray2(2,'type','text'),(null as any));
    this._NgClass_2_3 = new import16.Wrapper_NgClass(this.parentView.injectorGet(import22.IterableDiffers,this.parentIndex),this.parentView.injectorGet(import23.KeyValueDiffers,this.parentIndex),new import14.ElementRef(this._el_2),this.renderer);
    this._DefaultValueAccessor_2_4 = new import17.Wrapper_DefaultValueAccessor(this.renderer,new import14.ElementRef(this._el_2));
    this._NG_VALUE_ACCESSOR_2_5 = [this._DefaultValueAccessor_2_4.context];
    this._NgModel_2_6 = new import18.Wrapper_NgModel((null as any),(null as any),(null as any),this._NG_VALUE_ACCESSOR_2_5);
    this._NgControl_2_7 = this._NgModel_2_6.context;
    this._NgControlStatus_2_8 = new import19.Wrapper_NgControlStatus(this._NgControl_2_7);
    this._TextDirective_2_9 = new import20.Wrapper_TextDirective(new import14.ElementRef(this._el_2),this.renderer);
    this._text_3 = this.renderer.createText(this._el_0,'\n        ',(null as any));
    this._anchor_4 = this.renderer.createTemplateAnchor(this._el_0,(null as any));
    this._vc_4 = new import13.ViewContainer(4,0,this,this._anchor_4);
    this._TemplateRef_4_5 = new import24.TemplateRef_(this,4,this._anchor_4);
    this._NgIf_4_6 = new import21.Wrapper_NgIf(this._vc_4.vcRef,this._TemplateRef_4_5);
    this._text_5 = this.renderer.createText(this._el_0,'\n    ',(null as any));
    this._text_6 = this.renderer.createText(parentRenderNode,'\n    ',(null as any));
    var disposable_0:Function = import3.subscribeToRenderElement(this,this._el_2,new import3.InlineArray8(6,'ngModelChange',(null as any),'input',(null as any),'blur',(null as any)),this.eventHandler(this.handleEvent_2));
    this._NgModel_2_6.subscribe(this,this.eventHandler(this.handleEvent_2),true);
    this.init((null as any),((<any>this.renderer).directRenderer? (null as any): [
      this._el_0,
      this._text_1,
      this._el_2,
      this._text_3,
      this._anchor_4,
      this._text_5,
      this._text_6
    ]
    ),[disposable_0]);
    return (null as any);
  }
  injectorGetInternal(token:any,requestNodeIndex:number,notFoundResult:any):any {
    if (((token === import25.NgClass) && (2 === requestNodeIndex))) { return this._NgClass_2_3.context; }
    if (((token === import26.DefaultValueAccessor) && (2 === requestNodeIndex))) { return this._DefaultValueAccessor_2_4.context; }
    if (((token === import10.NG_VALUE_ACCESSOR) && (2 === requestNodeIndex))) { return this._NG_VALUE_ACCESSOR_2_5; }
    if (((token === import27.NgModel) && (2 === requestNodeIndex))) { return this._NgModel_2_6.context; }
    if (((token === import28.NgControl) && (2 === requestNodeIndex))) { return this._NgControl_2_7; }
    if (((token === import29.NgControlStatus) && (2 === requestNodeIndex))) { return this._NgControlStatus_2_8.context; }
    if (((token === import30.TextDirective) && (2 === requestNodeIndex))) { return this._TextDirective_2_9.context; }
    if (((token === import24.TemplateRef) && (4 === requestNodeIndex))) { return this._TemplateRef_4_5; }
    if (((token === import31.NgIf) && (4 === requestNodeIndex))) { return this._NgIf_4_6.context; }
    return notFoundResult;
  }
  detectChangesInternal(throwOnChange:boolean):void {
    const currVal_2_0_0:any = this._map_17(((!!this.context.errors && !!!this.context.errors['required']) && !!this.context.errors['validThumbPrint']));
    this._NgClass_2_3.check_ngClass(currVal_2_0_0,throwOnChange,false);
    this._NgClass_2_3.ngDoCheck(this,this._el_2,throwOnChange);
    this._DefaultValueAccessor_2_4.ngDoCheck(this,this._el_2,throwOnChange);
    const currVal_2_2_0:any = this.context.isDisabled;
    this._NgModel_2_6.check_isDisabled(currVal_2_2_0,throwOnChange,false);
    const currVal_2_2_1:any = this.context.input;
    this._NgModel_2_6.check_model(currVal_2_2_1,throwOnChange,false);
    this._NgModel_2_6.ngDoCheck(this,this._el_2,throwOnChange);
    this._NgControlStatus_2_8.ngDoCheck(this,this._el_2,throwOnChange);
    this._TextDirective_2_9.ngDoCheck(this,this._el_2,throwOnChange);
    const currVal_4_0_0:boolean = ((!!this.context.errors && !!!this.context.errors['required']) && !!this.context.errors['validThumbPrint']);
    this._NgIf_4_6.check_ngIf(currVal_4_0_0,throwOnChange,false);
    this._NgIf_4_6.ngDoCheck(this,this._anchor_4,throwOnChange);
    this._vc_4.detectChangesInNestedViews(throwOnChange);
    this._NgControlStatus_2_8.checkHost(this,this,this._el_2,throwOnChange);
  }
  destroyInternal():void {
    this._vc_4.destroyNestedViews();
    this._NgModel_2_6.ngOnDestroy();
  }
  createEmbeddedViewInternal(nodeIndex:number):import2.AppView<any> {
    if ((nodeIndex == 4)) { return new View_ThumbprintInputComponent1(this.viewUtils,this,4,this._anchor_4,this._vc_4); }
    return (null as any);
  }
  handleEvent_2(eventName:string,$event:any):boolean {
    this.markPathToRootAsCheckOnce();
    var result:boolean = true;
    result = (this._DefaultValueAccessor_2_4.handleEvent(eventName,$event) && result);
    if ((eventName == 'ngModelChange')) {
      const pd_sub_0:any = ((<any>(this.context.input = $event)) !== false);
      result = (pd_sub_0 && result);
    }
    return result;
  }
}