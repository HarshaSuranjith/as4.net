/**
 * @fileoverview This file is generated by the Angular 2 template compiler.
 * Do not edit.
 * @suppress {suspiciousCode,uselessCode,missingProperties}
 */
 /* tslint:disable */

import * as import0 from '../../../../src/app/settings/receiver.component';
import * as import1 from '@angular/core/src/change_detection/change_detection_util';
import * as import2 from '@angular/core/src/linker/view';
import * as import3 from '@angular/core/src/linker/view_utils';
import * as import4 from '@angular/core/src/render/api';
import * as import5 from '@angular/core/src/metadata/view';
import * as import6 from '@angular/core/src/linker/view_type';
import * as import7 from '@angular/core/src/change_detection/constants';
import * as import8 from '@angular/core/src/linker/component_factory';
import * as import9 from '../../../../src/app/settings/runtime.store';
import * as import10 from '@angular/forms/src/form_builder';
import * as import11 from '../../../node_modules/@angular/forms/src/directives/select_control_value_accessor.ngfactory';
import * as import12 from '../../../node_modules/@angular/forms/src/directives/select_multiple_control_value_accessor.ngfactory';
import * as import13 from '@angular/core/src/linker/view_container';
import * as import14 from '@angular/core/src/linker/element_ref';
import * as import15 from '@angular/forms/src/directives/select_control_value_accessor';
import * as import16 from '@angular/forms/src/directives/select_multiple_control_value_accessor';
import * as import17 from '../../../node_modules/@angular/forms/src/directives/reactive_directives/form_group_directive.ngfactory';
import * as import18 from '../../../node_modules/@angular/forms/src/directives/ng_control_status.ngfactory';
import * as import19 from '../../../../src/app/common/input/input.component';
import * as import20 from '../common/input/input.component.ngfactory';
import * as import21 from '../common/selectdirective.ngfactory';
import * as import22 from '../../../node_modules/@angular/forms/src/directives/reactive_directives/form_control_name.ngfactory';
import * as import23 from '../../../node_modules/@angular/common/src/directives/ng_for.ngfactory';
import * as import24 from '../../../../src/app/common/runtimesettings/runtimesettings.component';
import * as import25 from '../common/runtimesettings/runtimesettings.component.ngfactory';
import * as import26 from '@angular/core/src/linker/template_ref';
import * as import27 from '@angular/core/src/change_detection/differs/iterable_differs';
import * as import28 from '@angular/common/src/directives/ng_for';
import * as import29 from '../../../../src/app/common/selectdirective';
import * as import30 from '@angular/forms/src/directives/control_value_accessor';
import * as import31 from '@angular/forms/src/directives/reactive_directives/form_control_name';
import * as import32 from '@angular/forms/src/directives/ng_control';
import * as import33 from '@angular/forms/src/directives/ng_control_status';
import * as import34 from '@angular/forms/src/directives/reactive_directives/form_group_directive';
import * as import35 from '@angular/forms/src/directives/control_container';
export class Wrapper_ReceiverComponent {
  /*private*/ _eventHandler:Function;
  context:import0.ReceiverComponent;
  /*private*/ _changed:boolean;
  /*private*/ _expr_0:any;
  constructor(p0:any,p1:any) {
    this._changed = false;
    this.context = new import0.ReceiverComponent(p0,p1);
    this._expr_0 = import1.UNINITIALIZED;
  }
  ngOnDetach(view:import2.AppView<any>,componentView:import2.AppView<any>,el:any):void {
  }
  ngOnDestroy():void {
    this.context.ngOnDestroy();
  }
  check_group(currValue:any,throwOnChange:boolean,forceUpdate:boolean):void {
    if ((forceUpdate || import3.checkBinding(throwOnChange,this._expr_0,currValue))) {
      this._changed = true;
      this.context.group = currValue;
      this._expr_0 = currValue;
    }
  }
  ngDoCheck(view:import2.AppView<any>,el:any,throwOnChange:boolean):boolean {
    var changed:any = this._changed;
    this._changed = false;
    return changed;
  }
  checkHost(view:import2.AppView<any>,componentView:import2.AppView<any>,el:any,throwOnChange:boolean):void {
  }
  handleEvent(eventName:string,$event:any):boolean {
    var result:boolean = true;
    return result;
  }
  subscribe(view:import2.AppView<any>,_eventHandler:any):void {
    this._eventHandler = _eventHandler;
  }
}
var renderType_ReceiverComponent_Host:import4.RenderComponentType = import3.createRenderComponentType('',0,import5.ViewEncapsulation.None,([] as any[]),{});
class View_ReceiverComponent_Host0 extends import2.AppView<any> {
  _el_0:any;
  compView_0:import2.AppView<import0.ReceiverComponent>;
  _ReceiverComponent_0_3:Wrapper_ReceiverComponent;
  constructor(viewUtils:import3.ViewUtils,parentView:import2.AppView<any>,parentIndex:number,parentElement:any) {
    super(View_ReceiverComponent_Host0,renderType_ReceiverComponent_Host,import6.ViewType.HOST,viewUtils,parentView,parentIndex,parentElement,import7.ChangeDetectorStatus.CheckAlways);
  }
  createInternal(rootSelector:string):import8.ComponentRef<any> {
    this._el_0 = import3.selectOrCreateRenderHostElement(this.renderer,'as4-receiver',import3.EMPTY_INLINE_ARRAY,rootSelector,(null as any));
    this.compView_0 = new View_ReceiverComponent0(this.viewUtils,this,0,this._el_0);
    this._ReceiverComponent_0_3 = new Wrapper_ReceiverComponent(this.injectorGet(import9.RuntimeStore,this.parentIndex),this.injectorGet(import10.FormBuilder,this.parentIndex));
    this.compView_0.create(this._ReceiverComponent_0_3.context);
    this.init(this._el_0,((<any>this.renderer).directRenderer? (null as any): [this._el_0]),(null as any));
    return new import8.ComponentRef_<any>(0,this,this._el_0,this._ReceiverComponent_0_3.context);
  }
  injectorGetInternal(token:any,requestNodeIndex:number,notFoundResult:any):any {
    if (((token === import0.ReceiverComponent) && (0 === requestNodeIndex))) { return this._ReceiverComponent_0_3.context; }
    return notFoundResult;
  }
  detectChangesInternal(throwOnChange:boolean):void {
    this._ReceiverComponent_0_3.ngDoCheck(this,this._el_0,throwOnChange);
    this.compView_0.internalDetectChanges(throwOnChange);
  }
  destroyInternal():void {
    this.compView_0.destroy();
    this._ReceiverComponent_0_3.ngOnDestroy();
  }
  visitRootNodesInternal(cb:any,ctx:any):void {
    cb(this._el_0,ctx);
  }
}
export const ReceiverComponentNgFactory:import8.ComponentFactory<import0.ReceiverComponent> = new import8.ComponentFactory<import0.ReceiverComponent>('as4-receiver',View_ReceiverComponent_Host0,import0.ReceiverComponent);
const styles_ReceiverComponent:any[] = ([] as any[]);
class View_ReceiverComponent1 extends import2.AppView<any> {
  _el_0:any;
  _NgSelectOption_0_3:import11.Wrapper_NgSelectOption;
  _NgSelectMultipleOption_0_4:import12.Wrapper_NgSelectMultipleOption;
  _text_1:any;
  /*private*/ _expr_4:any;
  constructor(viewUtils:import3.ViewUtils,parentView:import2.AppView<any>,parentIndex:number,parentElement:any,declaredViewContainer:import13.ViewContainer) {
    super(View_ReceiverComponent1,renderType_ReceiverComponent,import6.ViewType.EMBEDDED,viewUtils,parentView,parentIndex,parentElement,import7.ChangeDetectorStatus.CheckAlways,declaredViewContainer);
    this._expr_4 = import1.UNINITIALIZED;
  }
  createInternal(rootSelector:string):import8.ComponentRef<any> {
    this._el_0 = import3.createRenderElement(this.renderer,(null as any),'option',import3.EMPTY_INLINE_ARRAY,(null as any));
    this._NgSelectOption_0_3 = new import11.Wrapper_NgSelectOption(new import14.ElementRef(this._el_0),this.renderer,(<View_ReceiverComponent0>this.parentView)._SelectControlValueAccessor_5_4.context);
    this._NgSelectMultipleOption_0_4 = new import12.Wrapper_NgSelectMultipleOption(new import14.ElementRef(this._el_0),this.renderer,(null as any));
    this._text_1 = this.renderer.createText(this._el_0,'',(null as any));
    this.init(this._el_0,((<any>this.renderer).directRenderer? (null as any): [
      this._el_0,
      this._text_1
    ]
    ),(null as any));
    return (null as any);
  }
  injectorGetInternal(token:any,requestNodeIndex:number,notFoundResult:any):any {
    if (((token === import15.NgSelectOption) && ((0 <= requestNodeIndex) && (requestNodeIndex <= 1)))) { return this._NgSelectOption_0_3.context; }
    if (((token === import16.NgSelectMultipleOption) && ((0 <= requestNodeIndex) && (requestNodeIndex <= 1)))) { return this._NgSelectMultipleOption_0_4.context; }
    return notFoundResult;
  }
  detectChangesInternal(throwOnChange:boolean):void {
    const currVal_0_0_0:any = this.context.$implicit.technicalName;
    this._NgSelectOption_0_3.check_value(currVal_0_0_0,throwOnChange,false);
    this._NgSelectOption_0_3.ngDoCheck(this,this._el_0,throwOnChange);
    const currVal_0_1_0:any = this.context.$implicit.technicalName;
    this._NgSelectMultipleOption_0_4.check_value(currVal_0_1_0,throwOnChange,false);
    this._NgSelectMultipleOption_0_4.ngDoCheck(this,this._el_0,throwOnChange);
    const currVal_4:any = import3.inlineInterpolate(1,'',this.context.$implicit.name,'');
    if (import3.checkBinding(throwOnChange,this._expr_4,currVal_4)) {
      this.renderer.setText(this._text_1,currVal_4);
      this._expr_4 = currVal_4;
    }
  }
  destroyInternal():void {
    this._NgSelectOption_0_3.ngOnDestroy();
    this._NgSelectMultipleOption_0_4.ngOnDestroy();
  }
  visitRootNodesInternal(cb:any,ctx:any):void {
    cb(this._el_0,ctx);
  }
}
var renderType_ReceiverComponent:import4.RenderComponentType = import3.createRenderComponentType('',0,import5.ViewEncapsulation.None,styles_ReceiverComponent,{});
export class View_ReceiverComponent0 extends import2.AppView<import0.ReceiverComponent> {
  _text_0:any;
  _el_1:any;
  _FormGroupDirective_1_3:import17.Wrapper_FormGroupDirective;
  _ControlContainer_1_4:any;
  _NgControlStatusGroup_1_5:import18.Wrapper_NgControlStatusGroup;
  _text_2:any;
  _el_3:any;
  compView_3:import2.AppView<import19.InputComponent>;
  _InputComponent_3_3:import20.Wrapper_InputComponent;
  _text_4:any;
  _el_5:any;
  _SelectDirective_5_3:import21.Wrapper_SelectDirective;
  _SelectControlValueAccessor_5_4:import11.Wrapper_SelectControlValueAccessor;
  _NG_VALUE_ACCESSOR_5_5:any[];
  _FormControlName_5_6:import22.Wrapper_FormControlName;
  _NgControl_5_7:any;
  _NgControlStatus_5_8:import18.Wrapper_NgControlStatus;
  _text_6:any;
  _anchor_7:any;
  /*private*/ _vc_7:import13.ViewContainer;
  _TemplateRef_7_5:any;
  _NgFor_7_6:import23.Wrapper_NgFor;
  _text_8:any;
  _text_9:any;
  _text_10:any;
  _el_11:any;
  compView_11:import2.AppView<import24.RuntimeSettingsComponent>;
  _RuntimeSettingsComponent_11_3:import25.Wrapper_RuntimeSettingsComponent;
  _text_12:any;
  _text_13:any;
  constructor(viewUtils:import3.ViewUtils,parentView:import2.AppView<any>,parentIndex:number,parentElement:any) {
    super(View_ReceiverComponent0,renderType_ReceiverComponent,import6.ViewType.COMPONENT,viewUtils,parentView,parentIndex,parentElement,import7.ChangeDetectorStatus.CheckAlways);
  }
  createInternal(rootSelector:string):import8.ComponentRef<any> {
    const parentRenderNode:any = this.renderer.createViewRoot(this.parentElement);
    this._text_0 = this.renderer.createText(parentRenderNode,'\n        ',(null as any));
    this._el_1 = import3.createRenderElement(this.renderer,parentRenderNode,'div',import3.EMPTY_INLINE_ARRAY,(null as any));
    this._FormGroupDirective_1_3 = new import17.Wrapper_FormGroupDirective((null as any),(null as any));
    this._ControlContainer_1_4 = this._FormGroupDirective_1_3.context;
    this._NgControlStatusGroup_1_5 = new import18.Wrapper_NgControlStatusGroup(this._ControlContainer_1_4);
    this._text_2 = this.renderer.createText(this._el_1,'    \n            ',(null as any));
    this._el_3 = import3.createRenderElement(this.renderer,this._el_1,'as4-input',import3.EMPTY_INLINE_ARRAY,(null as any));
    this.compView_3 = new import20.View_InputComponent0(this.viewUtils,this,3,this._el_3);
    this._InputComponent_3_3 = new import20.Wrapper_InputComponent(this.parentView.injectorGet(import9.RuntimeStore,this.parentIndex));
    this._text_4 = this.renderer.createText((null as any),'\n                ',(null as any));
    this._el_5 = import3.createRenderElement(this.renderer,(null as any),'select',new import3.InlineArray4(4,'class','form-control','formControlName','type'),(null as any));
    this._SelectDirective_5_3 = new import21.Wrapper_SelectDirective(new import14.ElementRef(this._el_5),this.renderer);
    this._SelectControlValueAccessor_5_4 = new import11.Wrapper_SelectControlValueAccessor(this.renderer,new import14.ElementRef(this._el_5));
    this._NG_VALUE_ACCESSOR_5_5 = [this._SelectControlValueAccessor_5_4.context];
    this._FormControlName_5_6 = new import22.Wrapper_FormControlName(this._ControlContainer_1_4,(null as any),(null as any),this._NG_VALUE_ACCESSOR_5_5);
    this._NgControl_5_7 = this._FormControlName_5_6.context;
    this._NgControlStatus_5_8 = new import18.Wrapper_NgControlStatus(this._NgControl_5_7);
    this._text_6 = this.renderer.createText(this._el_5,'\n                    ',(null as any));
    this._anchor_7 = this.renderer.createTemplateAnchor(this._el_5,(null as any));
    this._vc_7 = new import13.ViewContainer(7,5,this,this._anchor_7);
    this._TemplateRef_7_5 = new import26.TemplateRef_(this,7,this._anchor_7);
    this._NgFor_7_6 = new import23.Wrapper_NgFor(this._vc_7.vcRef,this._TemplateRef_7_5,this.parentView.injectorGet(import27.IterableDiffers,this.parentIndex),this.ref);
    this._text_8 = this.renderer.createText(this._el_5,'\n                ',(null as any));
    this._text_9 = this.renderer.createText((null as any),'\n            ',(null as any));
    this.compView_3.create(this._InputComponent_3_3.context);
    this._text_10 = this.renderer.createText(this._el_1,'\n            ',(null as any));
    this._el_11 = import3.createRenderElement(this.renderer,this._el_1,'as4-runtime-settings',import3.EMPTY_INLINE_ARRAY,(null as any));
    this.compView_11 = new import25.View_RuntimeSettingsComponent0(this.viewUtils,this,11,this._el_11);
    this._RuntimeSettingsComponent_11_3 = new import25.Wrapper_RuntimeSettingsComponent();
    this.compView_11.create(this._RuntimeSettingsComponent_11_3.context);
    this._text_12 = this.renderer.createText(this._el_1,'      \n        ',(null as any));
    this._text_13 = this.renderer.createText(parentRenderNode,'\n    ',(null as any));
    var disposable_0:Function = import3.subscribeToRenderElement(this,this._el_1,new import3.InlineArray4(4,'submit',(null as any),'reset',(null as any)),this.eventHandler(this.handleEvent_1));
    var disposable_1:Function = import3.subscribeToRenderElement(this,this._el_5,new import3.InlineArray4(4,'change',(null as any),'blur',(null as any)),this.eventHandler(this.handleEvent_5));
    this.init((null as any),((<any>this.renderer).directRenderer? (null as any): [
      this._text_0,
      this._el_1,
      this._text_2,
      this._el_3,
      this._text_4,
      this._el_5,
      this._text_6,
      this._anchor_7,
      this._text_8,
      this._text_9,
      this._text_10,
      this._el_11,
      this._text_12,
      this._text_13
    ]
    ),[
      disposable_0,
      disposable_1
    ]
    );
    return (null as any);
  }
  injectorGetInternal(token:any,requestNodeIndex:number,notFoundResult:any):any {
    if (((token === import26.TemplateRef) && (7 === requestNodeIndex))) { return this._TemplateRef_7_5; }
    if (((token === import28.NgFor) && (7 === requestNodeIndex))) { return this._NgFor_7_6.context; }
    if (((token === import29.SelectDirective) && ((5 <= requestNodeIndex) && (requestNodeIndex <= 8)))) { return this._SelectDirective_5_3.context; }
    if (((token === import15.SelectControlValueAccessor) && ((5 <= requestNodeIndex) && (requestNodeIndex <= 8)))) { return this._SelectControlValueAccessor_5_4.context; }
    if (((token === import30.NG_VALUE_ACCESSOR) && ((5 <= requestNodeIndex) && (requestNodeIndex <= 8)))) { return this._NG_VALUE_ACCESSOR_5_5; }
    if (((token === import31.FormControlName) && ((5 <= requestNodeIndex) && (requestNodeIndex <= 8)))) { return this._FormControlName_5_6.context; }
    if (((token === import32.NgControl) && ((5 <= requestNodeIndex) && (requestNodeIndex <= 8)))) { return this._NgControl_5_7; }
    if (((token === import33.NgControlStatus) && ((5 <= requestNodeIndex) && (requestNodeIndex <= 8)))) { return this._NgControlStatus_5_8.context; }
    if (((token === import19.InputComponent) && ((3 <= requestNodeIndex) && (requestNodeIndex <= 9)))) { return this._InputComponent_3_3.context; }
    if (((token === import24.RuntimeSettingsComponent) && (11 === requestNodeIndex))) { return this._RuntimeSettingsComponent_11_3.context; }
    if (((token === import34.FormGroupDirective) && ((1 <= requestNodeIndex) && (requestNodeIndex <= 12)))) { return this._FormGroupDirective_1_3.context; }
    if (((token === import35.ControlContainer) && ((1 <= requestNodeIndex) && (requestNodeIndex <= 12)))) { return this._ControlContainer_1_4; }
    if (((token === import33.NgControlStatusGroup) && ((1 <= requestNodeIndex) && (requestNodeIndex <= 12)))) { return this._NgControlStatusGroup_1_5.context; }
    return notFoundResult;
  }
  detectChangesInternal(throwOnChange:boolean):void {
    const currVal_1_0_0:any = this.context.group;
    this._FormGroupDirective_1_3.check_form(currVal_1_0_0,throwOnChange,false);
    this._FormGroupDirective_1_3.ngDoCheck(this,this._el_1,throwOnChange);
    this._NgControlStatusGroup_1_5.ngDoCheck(this,this._el_1,throwOnChange);
    const currVal_3_0_0:any = 'Type';
    this._InputComponent_3_3.check_label(currVal_3_0_0,throwOnChange,false);
    if (this._InputComponent_3_3.ngDoCheck(this,this._el_3,throwOnChange)) { this.compView_3.markAsCheckOnce(); }
    this._SelectDirective_5_3.ngDoCheck(this,this._el_5,throwOnChange);
    this._SelectControlValueAccessor_5_4.ngDoCheck(this,this._el_5,throwOnChange);
    const currVal_5_2_0:any = 'type';
    this._FormControlName_5_6.check_name(currVal_5_2_0,throwOnChange,false);
    this._FormControlName_5_6.ngDoCheck(this,this._el_5,throwOnChange);
    this._NgControlStatus_5_8.ngDoCheck(this,this._el_5,throwOnChange);
    const currVal_7_0_0:any = this.context.types;
    this._NgFor_7_6.check_ngForOf(currVal_7_0_0,throwOnChange,false);
    this._NgFor_7_6.ngDoCheck(this,this._anchor_7,throwOnChange);
    const currVal_11_0_0:any = this.context.group;
    this._RuntimeSettingsComponent_11_3.check_form(currVal_11_0_0,throwOnChange,false);
    const currVal_11_0_1:any = this.context.types;
    this._RuntimeSettingsComponent_11_3.check_types(currVal_11_0_1,throwOnChange,false);
    const currVal_11_0_2:any = this._el_5.value;
    this._RuntimeSettingsComponent_11_3.check_itemType(currVal_11_0_2,throwOnChange,false);
    if (this._RuntimeSettingsComponent_11_3.ngDoCheck(this,this._el_11,throwOnChange)) { this.compView_11.markAsCheckOnce(); }
    this._vc_7.detectChangesInNestedViews(throwOnChange);
    this._NgControlStatusGroup_1_5.checkHost(this,this,this._el_1,throwOnChange);
    this._NgControlStatus_5_8.checkHost(this,this,this._el_5,throwOnChange);
    this.compView_3.internalDetectChanges(throwOnChange);
    this.compView_11.internalDetectChanges(throwOnChange);
  }
  destroyInternal():void {
    this._vc_7.destroyNestedViews();
    this.compView_3.destroy();
    this.compView_11.destroy();
    this._FormControlName_5_6.ngOnDestroy();
    this._FormGroupDirective_1_3.ngOnDestroy();
  }
  visitProjectableNodesInternal(nodeIndex:number,ngContentIndex:number,cb:any,ctx:any):void {
    if (((nodeIndex == 3) && (ngContentIndex == 0))) {  }
    if (((nodeIndex == 3) && (ngContentIndex == 1))) {
      cb(this._text_4,ctx);
      cb(this._el_5,ctx);
      cb(this._text_9,ctx);
    }
  }
  createEmbeddedViewInternal(nodeIndex:number):import2.AppView<any> {
    if ((nodeIndex == 7)) { return new View_ReceiverComponent1(this.viewUtils,this,7,this._anchor_7,this._vc_7); }
    return (null as any);
  }
  handleEvent_1(eventName:string,$event:any):boolean {
    this.markPathToRootAsCheckOnce();
    var result:boolean = true;
    result = (this._FormGroupDirective_1_3.handleEvent(eventName,$event) && result);
    return result;
  }
  handleEvent_5(eventName:string,$event:any):boolean {
    this.markPathToRootAsCheckOnce();
    var result:boolean = true;
    result = (this._SelectControlValueAccessor_5_4.handleEvent(eventName,$event) && result);
    if ((eventName == 'change')) {
      const pd_sub_0:any = ((<any>this.context.receiverChanged($event.target.value)) !== false);
      result = (pd_sub_0 && result);
    }
    return result;
  }
}