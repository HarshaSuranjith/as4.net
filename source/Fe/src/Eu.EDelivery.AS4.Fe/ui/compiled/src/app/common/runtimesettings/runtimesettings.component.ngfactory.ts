/**
 * @fileoverview This file is generated by the Angular 2 template compiler.
 * Do not edit.
 * @suppress {suspiciousCode,uselessCode,missingProperties}
 */
 /* tslint:disable */

import * as import0 from '../../../../../src/app/common/runtimesettings/runtimesettings.component';
import * as import1 from '@angular/core/src/change_detection/change_detection_util';
import * as import2 from '@angular/core/src/linker/view';
import * as import3 from '@angular/core/src/linker/view_utils';
import * as import4 from '@angular/core/src/render/api';
import * as import5 from '@angular/core/src/metadata/view';
import * as import6 from '@angular/core/src/linker/view_type';
import * as import7 from '@angular/core/src/change_detection/constants';
import * as import8 from '@angular/core/src/linker/component_factory';
import * as import9 from '@angular/core/src/linker/view_container';
import * as import10 from '../../../../node_modules/@angular/forms/src/directives/default_value_accessor.ngfactory';
import * as import11 from '../../../../node_modules/@angular/forms/src/directives/number_value_accessor.ngfactory';
import * as import12 from '../../../../node_modules/@angular/forms/src/directives/reactive_directives/form_control_name.ngfactory';
import * as import13 from '../../../../node_modules/@angular/forms/src/directives/ng_control_status.ngfactory';
import * as import14 from '../text.directive.ngfactory';
import * as import15 from '@angular/core/src/linker/element_ref';
import * as import16 from '@angular/forms/src/directives/default_value_accessor';
import * as import17 from '@angular/forms/src/directives/number_value_accessor';
import * as import18 from '@angular/forms/src/directives/control_value_accessor';
import * as import19 from '@angular/forms/src/directives/reactive_directives/form_control_name';
import * as import20 from '@angular/forms/src/directives/ng_control';
import * as import21 from '@angular/forms/src/directives/ng_control_status';
import * as import22 from '../../../../../src/app/common/text.directive';
import * as import23 from '../../../../node_modules/@angular/forms/src/directives/reactive_directives/form_group_name.ngfactory';
import * as import24 from '../../../../../src/app/common/input/input.component';
import * as import25 from '../input/input.component.ngfactory';
import * as import26 from '../../../../node_modules/@angular/common/src/directives/ng_switch.ngfactory';
import * as import27 from '../../../../../src/app/settings/runtime.store';
import * as import28 from '@angular/core/src/linker/template_ref';
import * as import29 from '@angular/common/src/directives/ng_switch';
import * as import30 from '@angular/forms/src/directives/reactive_directives/form_group_name';
import * as import31 from '@angular/forms/src/directives/control_container';
import * as import32 from '../../../../node_modules/@angular/common/src/directives/ng_if.ngfactory';
import * as import33 from '../../../../node_modules/@angular/common/src/directives/ng_for.ngfactory';
import * as import34 from '@angular/core/src/change_detection/differs/iterable_differs';
import * as import35 from '@angular/common/src/directives/ng_if';
import * as import36 from '@angular/common/src/directives/ng_for';
import * as import37 from '../../../../node_modules/@angular/forms/src/directives/reactive_directives/form_group_directive.ngfactory';
import * as import38 from '@angular/forms/src/directives/reactive_directives/form_group_directive';
export class Wrapper_RuntimeSettingsComponent {
  /*private*/ _eventHandler:Function;
  context:import0.RuntimeSettingsComponent;
  /*private*/ _changed:boolean;
  /*private*/ _changes:{[key: string]:any};
  /*private*/ _expr_0:any;
  /*private*/ _expr_1:any;
  /*private*/ _expr_2:any;
  /*private*/ _expr_3:any;
  constructor() {
    this._changed = false;
    this._changes = {};
    this.context = new import0.RuntimeSettingsComponent();
    this._expr_0 = import1.UNINITIALIZED;
    this._expr_1 = import1.UNINITIALIZED;
    this._expr_2 = import1.UNINITIALIZED;
    this._expr_3 = import1.UNINITIALIZED;
  }
  ngOnDetach(view:import2.AppView<any>,componentView:import2.AppView<any>,el:any):void {
  }
  ngOnDestroy():void {
  }
  check_form(currValue:any,throwOnChange:boolean,forceUpdate:boolean):void {
    if ((forceUpdate || import3.checkBinding(throwOnChange,this._expr_0,currValue))) {
      this._changed = true;
      this.context.form = currValue;
      this._changes['form'] = new import1.SimpleChange(this._expr_0,currValue);
      this._expr_0 = currValue;
    }
  }
  check_types(currValue:any,throwOnChange:boolean,forceUpdate:boolean):void {
    if ((forceUpdate || import3.checkBinding(throwOnChange,this._expr_1,currValue))) {
      this._changed = true;
      this.context.types = currValue;
      this._changes['types'] = new import1.SimpleChange(this._expr_1,currValue);
      this._expr_1 = currValue;
    }
  }
  check_itemType(currValue:any,throwOnChange:boolean,forceUpdate:boolean):void {
    if ((forceUpdate || import3.checkBinding(throwOnChange,this._expr_2,currValue))) {
      this._changed = true;
      this.context.itemType = currValue;
      this._changes['itemType'] = new import1.SimpleChange(this._expr_2,currValue);
      this._expr_2 = currValue;
    }
  }
  check_showTitle(currValue:any,throwOnChange:boolean,forceUpdate:boolean):void {
    if ((forceUpdate || import3.checkBinding(throwOnChange,this._expr_3,currValue))) {
      this._changed = true;
      this.context.showTitle = currValue;
      this._changes['showTitle'] = new import1.SimpleChange(this._expr_3,currValue);
      this._expr_3 = currValue;
    }
  }
  ngDoCheck(view:import2.AppView<any>,el:any,throwOnChange:boolean):boolean {
    var changed:any = this._changed;
    this._changed = false;
    if (!throwOnChange) { if (changed) {
      this.context.ngOnChanges(this._changes);
      this._changes = {};
    } }
    return changed;
  }
  checkHost(view:import2.AppView<any>,componentView:import2.AppView<any>,el:any,throwOnChange:boolean):void {
  }
  handleEvent(eventName:string,$event:any):boolean {
    var result:boolean = true;
    return result;
  }
  subscribe(view:import2.AppView<any>,_eventHandler:any):void {
    this._eventHandler = _eventHandler;
  }
}
var renderType_RuntimeSettingsComponent_Host:import4.RenderComponentType = import3.createRenderComponentType('',0,import5.ViewEncapsulation.None,([] as any[]),{});
class View_RuntimeSettingsComponent_Host0 extends import2.AppView<any> {
  _el_0:any;
  compView_0:import2.AppView<import0.RuntimeSettingsComponent>;
  _RuntimeSettingsComponent_0_3:Wrapper_RuntimeSettingsComponent;
  constructor(viewUtils:import3.ViewUtils,parentView:import2.AppView<any>,parentIndex:number,parentElement:any) {
    super(View_RuntimeSettingsComponent_Host0,renderType_RuntimeSettingsComponent_Host,import6.ViewType.HOST,viewUtils,parentView,parentIndex,parentElement,import7.ChangeDetectorStatus.CheckAlways);
  }
  createInternal(rootSelector:string):import8.ComponentRef<any> {
    this._el_0 = import3.selectOrCreateRenderHostElement(this.renderer,'as4-runtime-settings',import3.EMPTY_INLINE_ARRAY,rootSelector,(null as any));
    this.compView_0 = new View_RuntimeSettingsComponent0(this.viewUtils,this,0,this._el_0);
    this._RuntimeSettingsComponent_0_3 = new Wrapper_RuntimeSettingsComponent();
    this.compView_0.create(this._RuntimeSettingsComponent_0_3.context);
    this.init(this._el_0,((<any>this.renderer).directRenderer? (null as any): [this._el_0]),(null as any));
    return new import8.ComponentRef_<any>(0,this,this._el_0,this._RuntimeSettingsComponent_0_3.context);
  }
  injectorGetInternal(token:any,requestNodeIndex:number,notFoundResult:any):any {
    if (((token === import0.RuntimeSettingsComponent) && (0 === requestNodeIndex))) { return this._RuntimeSettingsComponent_0_3.context; }
    return notFoundResult;
  }
  detectChangesInternal(throwOnChange:boolean):void {
    if (this._RuntimeSettingsComponent_0_3.ngDoCheck(this,this._el_0,throwOnChange)) { this.compView_0.markAsCheckOnce(); }
    this.compView_0.internalDetectChanges(throwOnChange);
  }
  destroyInternal():void {
    this.compView_0.destroy();
  }
  visitRootNodesInternal(cb:any,ctx:any):void {
    cb(this._el_0,ctx);
  }
}
export const RuntimeSettingsComponentNgFactory:import8.ComponentFactory<import0.RuntimeSettingsComponent> = new import8.ComponentFactory<import0.RuntimeSettingsComponent>('as4-runtime-settings',View_RuntimeSettingsComponent_Host0,import0.RuntimeSettingsComponent);
const styles_RuntimeSettingsComponent:any[] = ([] as any[]);
class View_RuntimeSettingsComponent2 extends import2.AppView<any> {
  _el_0:any;
  _text_1:any;
  constructor(viewUtils:import3.ViewUtils,parentView:import2.AppView<any>,parentIndex:number,parentElement:any,declaredViewContainer:import9.ViewContainer) {
    super(View_RuntimeSettingsComponent2,renderType_RuntimeSettingsComponent,import6.ViewType.EMBEDDED,viewUtils,parentView,parentIndex,parentElement,import7.ChangeDetectorStatus.CheckAlways,declaredViewContainer);
  }
  createInternal(rootSelector:string):import8.ComponentRef<any> {
    this._el_0 = import3.createRenderElement(this.renderer,(null as any),'h4',import3.EMPTY_INLINE_ARRAY,(null as any));
    this._text_1 = this.renderer.createText(this._el_0,'Settings',(null as any));
    this.init(this._el_0,((<any>this.renderer).directRenderer? (null as any): [
      this._el_0,
      this._text_1
    ]
    ),(null as any));
    return (null as any);
  }
  visitRootNodesInternal(cb:any,ctx:any):void {
    cb(this._el_0,ctx);
  }
}
class View_RuntimeSettingsComponent4 extends import2.AppView<any> {
  _el_0:any;
  _DefaultValueAccessor_0_3:import10.Wrapper_DefaultValueAccessor;
  _NumberValueAccessor_0_4:import11.Wrapper_NumberValueAccessor;
  _NG_VALUE_ACCESSOR_0_5:any[];
  _FormControlName_0_6:import12.Wrapper_FormControlName;
  _NgControl_0_7:any;
  _NgControlStatus_0_8:import13.Wrapper_NgControlStatus;
  _TextDirective_0_9:import14.Wrapper_TextDirective;
  constructor(viewUtils:import3.ViewUtils,parentView:import2.AppView<any>,parentIndex:number,parentElement:any,declaredViewContainer:import9.ViewContainer) {
    super(View_RuntimeSettingsComponent4,renderType_RuntimeSettingsComponent,import6.ViewType.EMBEDDED,viewUtils,parentView,parentIndex,parentElement,import7.ChangeDetectorStatus.CheckAlways,declaredViewContainer);
  }
  createInternal(rootSelector:string):import8.ComponentRef<any> {
    this._el_0 = import3.createRenderElement(this.renderer,(null as any),'input',new import3.InlineArray8(6,'class','form-control','formControlName','value','type','number'),(null as any));
    this._DefaultValueAccessor_0_3 = new import10.Wrapper_DefaultValueAccessor(this.renderer,new import15.ElementRef(this._el_0));
    this._NumberValueAccessor_0_4 = new import11.Wrapper_NumberValueAccessor(this.renderer,new import15.ElementRef(this._el_0));
    this._NG_VALUE_ACCESSOR_0_5 = [
      this._DefaultValueAccessor_0_3.context,
      this._NumberValueAccessor_0_4.context
    ]
    ;
    this._FormControlName_0_6 = new import12.Wrapper_FormControlName((<View_RuntimeSettingsComponent3>this.parentView)._ControlContainer_0_4,(null as any),(null as any),this._NG_VALUE_ACCESSOR_0_5);
    this._NgControl_0_7 = this._FormControlName_0_6.context;
    this._NgControlStatus_0_8 = new import13.Wrapper_NgControlStatus(this._NgControl_0_7);
    this._TextDirective_0_9 = new import14.Wrapper_TextDirective(new import15.ElementRef(this._el_0),this.renderer);
    var disposable_0:Function = import3.subscribeToRenderElement(this,this._el_0,new import3.InlineArray8(6,'input',(null as any),'blur',(null as any),'change',(null as any)),this.eventHandler(this.handleEvent_0));
    this.init(this._el_0,((<any>this.renderer).directRenderer? (null as any): [this._el_0]),[disposable_0]);
    return (null as any);
  }
  injectorGetInternal(token:any,requestNodeIndex:number,notFoundResult:any):any {
    if (((token === import16.DefaultValueAccessor) && (0 === requestNodeIndex))) { return this._DefaultValueAccessor_0_3.context; }
    if (((token === import17.NumberValueAccessor) && (0 === requestNodeIndex))) { return this._NumberValueAccessor_0_4.context; }
    if (((token === import18.NG_VALUE_ACCESSOR) && (0 === requestNodeIndex))) { return this._NG_VALUE_ACCESSOR_0_5; }
    if (((token === import19.FormControlName) && (0 === requestNodeIndex))) { return this._FormControlName_0_6.context; }
    if (((token === import20.NgControl) && (0 === requestNodeIndex))) { return this._NgControl_0_7; }
    if (((token === import21.NgControlStatus) && (0 === requestNodeIndex))) { return this._NgControlStatus_0_8.context; }
    if (((token === import22.TextDirective) && (0 === requestNodeIndex))) { return this._TextDirective_0_9.context; }
    return notFoundResult;
  }
  detectChangesInternal(throwOnChange:boolean):void {
    this._DefaultValueAccessor_0_3.ngDoCheck(this,this._el_0,throwOnChange);
    this._NumberValueAccessor_0_4.ngDoCheck(this,this._el_0,throwOnChange);
    const currVal_0_2_0:any = 'value';
    this._FormControlName_0_6.check_name(currVal_0_2_0,throwOnChange,false);
    this._FormControlName_0_6.ngDoCheck(this,this._el_0,throwOnChange);
    this._NgControlStatus_0_8.ngDoCheck(this,this._el_0,throwOnChange);
    this._TextDirective_0_9.ngDoCheck(this,this._el_0,throwOnChange);
    this._NgControlStatus_0_8.checkHost(this,this,this._el_0,throwOnChange);
  }
  destroyInternal():void {
    this._FormControlName_0_6.ngOnDestroy();
  }
  visitRootNodesInternal(cb:any,ctx:any):void {
    cb(this._el_0,ctx);
  }
  handleEvent_0(eventName:string,$event:any):boolean {
    this.markPathToRootAsCheckOnce();
    var result:boolean = true;
    result = (this._DefaultValueAccessor_0_3.handleEvent(eventName,$event) && result);
    result = (this._NumberValueAccessor_0_4.handleEvent(eventName,$event) && result);
    return result;
  }
}
class View_RuntimeSettingsComponent5 extends import2.AppView<any> {
  _el_0:any;
  _DefaultValueAccessor_0_3:import10.Wrapper_DefaultValueAccessor;
  _NG_VALUE_ACCESSOR_0_4:any[];
  _FormControlName_0_5:import12.Wrapper_FormControlName;
  _NgControl_0_6:any;
  _NgControlStatus_0_7:import13.Wrapper_NgControlStatus;
  _TextDirective_0_8:import14.Wrapper_TextDirective;
  constructor(viewUtils:import3.ViewUtils,parentView:import2.AppView<any>,parentIndex:number,parentElement:any,declaredViewContainer:import9.ViewContainer) {
    super(View_RuntimeSettingsComponent5,renderType_RuntimeSettingsComponent,import6.ViewType.EMBEDDED,viewUtils,parentView,parentIndex,parentElement,import7.ChangeDetectorStatus.CheckAlways,declaredViewContainer);
  }
  createInternal(rootSelector:string):import8.ComponentRef<any> {
    this._el_0 = import3.createRenderElement(this.renderer,(null as any),'input',new import3.InlineArray8(6,'class','form-control','formControlName','value','type','text'),(null as any));
    this._DefaultValueAccessor_0_3 = new import10.Wrapper_DefaultValueAccessor(this.renderer,new import15.ElementRef(this._el_0));
    this._NG_VALUE_ACCESSOR_0_4 = [this._DefaultValueAccessor_0_3.context];
    this._FormControlName_0_5 = new import12.Wrapper_FormControlName((<View_RuntimeSettingsComponent3>this.parentView)._ControlContainer_0_4,(null as any),(null as any),this._NG_VALUE_ACCESSOR_0_4);
    this._NgControl_0_6 = this._FormControlName_0_5.context;
    this._NgControlStatus_0_7 = new import13.Wrapper_NgControlStatus(this._NgControl_0_6);
    this._TextDirective_0_8 = new import14.Wrapper_TextDirective(new import15.ElementRef(this._el_0),this.renderer);
    var disposable_0:Function = import3.subscribeToRenderElement(this,this._el_0,new import3.InlineArray4(4,'input',(null as any),'blur',(null as any)),this.eventHandler(this.handleEvent_0));
    this.init(this._el_0,((<any>this.renderer).directRenderer? (null as any): [this._el_0]),[disposable_0]);
    return (null as any);
  }
  injectorGetInternal(token:any,requestNodeIndex:number,notFoundResult:any):any {
    if (((token === import16.DefaultValueAccessor) && (0 === requestNodeIndex))) { return this._DefaultValueAccessor_0_3.context; }
    if (((token === import18.NG_VALUE_ACCESSOR) && (0 === requestNodeIndex))) { return this._NG_VALUE_ACCESSOR_0_4; }
    if (((token === import19.FormControlName) && (0 === requestNodeIndex))) { return this._FormControlName_0_5.context; }
    if (((token === import20.NgControl) && (0 === requestNodeIndex))) { return this._NgControl_0_6; }
    if (((token === import21.NgControlStatus) && (0 === requestNodeIndex))) { return this._NgControlStatus_0_7.context; }
    if (((token === import22.TextDirective) && (0 === requestNodeIndex))) { return this._TextDirective_0_8.context; }
    return notFoundResult;
  }
  detectChangesInternal(throwOnChange:boolean):void {
    this._DefaultValueAccessor_0_3.ngDoCheck(this,this._el_0,throwOnChange);
    const currVal_0_1_0:any = 'value';
    this._FormControlName_0_5.check_name(currVal_0_1_0,throwOnChange,false);
    this._FormControlName_0_5.ngDoCheck(this,this._el_0,throwOnChange);
    this._NgControlStatus_0_7.ngDoCheck(this,this._el_0,throwOnChange);
    this._TextDirective_0_8.ngDoCheck(this,this._el_0,throwOnChange);
    this._NgControlStatus_0_7.checkHost(this,this,this._el_0,throwOnChange);
  }
  destroyInternal():void {
    this._FormControlName_0_5.ngOnDestroy();
  }
  visitRootNodesInternal(cb:any,ctx:any):void {
    cb(this._el_0,ctx);
  }
  handleEvent_0(eventName:string,$event:any):boolean {
    this.markPathToRootAsCheckOnce();
    var result:boolean = true;
    result = (this._DefaultValueAccessor_0_3.handleEvent(eventName,$event) && result);
    return result;
  }
}
class View_RuntimeSettingsComponent3 extends import2.AppView<any> {
  _el_0:any;
  _FormGroupName_0_3:import23.Wrapper_FormGroupName;
  _ControlContainer_0_4:any;
  _NgControlStatusGroup_0_5:import13.Wrapper_NgControlStatusGroup;
  _text_1:any;
  _el_2:any;
  compView_2:import2.AppView<import24.InputComponent>;
  _InputComponent_2_3:import25.Wrapper_InputComponent;
  _text_3:any;
  _el_4:any;
  _text_5:any;
  _text_6:any;
  _el_7:any;
  _NgSwitch_7_3:import26.Wrapper_NgSwitch;
  _text_8:any;
  _anchor_9:any;
  /*private*/ _vc_9:import9.ViewContainer;
  _TemplateRef_9_5:any;
  _NgSwitchCase_9_6:import26.Wrapper_NgSwitchCase;
  _text_10:any;
  _anchor_11:any;
  /*private*/ _vc_11:import9.ViewContainer;
  _TemplateRef_11_5:any;
  _NgSwitchDefault_11_6:import26.Wrapper_NgSwitchDefault;
  _text_12:any;
  _text_13:any;
  _text_14:any;
  /*private*/ _expr_27:any;
  constructor(viewUtils:import3.ViewUtils,parentView:import2.AppView<any>,parentIndex:number,parentElement:any,declaredViewContainer:import9.ViewContainer) {
    super(View_RuntimeSettingsComponent3,renderType_RuntimeSettingsComponent,import6.ViewType.EMBEDDED,viewUtils,parentView,parentIndex,parentElement,import7.ChangeDetectorStatus.CheckAlways,declaredViewContainer);
    this._expr_27 = import1.UNINITIALIZED;
  }
  createInternal(rootSelector:string):import8.ComponentRef<any> {
    this._el_0 = import3.createRenderElement(this.renderer,(null as any),'div',import3.EMPTY_INLINE_ARRAY,(null as any));
    this._FormGroupName_0_3 = new import23.Wrapper_FormGroupName((<View_RuntimeSettingsComponent1>this.parentView)._ControlContainer_4_4,(null as any),(null as any));
    this._ControlContainer_0_4 = this._FormGroupName_0_3.context;
    this._NgControlStatusGroup_0_5 = new import13.Wrapper_NgControlStatusGroup(this._ControlContainer_0_4);
    this._text_1 = this.renderer.createText(this._el_0,'\n                        ',(null as any));
    this._el_2 = import3.createRenderElement(this.renderer,this._el_0,'as4-input',import3.EMPTY_INLINE_ARRAY,(null as any));
    this.compView_2 = new import25.View_InputComponent0(this.viewUtils,this,2,this._el_2);
    this._InputComponent_2_3 = new import25.Wrapper_InputComponent(this.parentView.parentView.parentView.injectorGet(import27.RuntimeStore,this.parentView.parentView.parentIndex));
    this._text_3 = this.renderer.createText((null as any),'\n                            ',(null as any));
    this._el_4 = import3.createRenderElement(this.renderer,(null as any),'span',new import3.InlineArray2(2,'label',''),(null as any));
    this._text_5 = this.renderer.createText(this._el_4,'',(null as any));
    this._text_6 = this.renderer.createText((null as any),'\n                            ',(null as any));
    this._el_7 = import3.createRenderElement(this.renderer,(null as any),'div',import3.EMPTY_INLINE_ARRAY,(null as any));
    this._NgSwitch_7_3 = new import26.Wrapper_NgSwitch();
    this._text_8 = this.renderer.createText(this._el_7,'\n                                ',(null as any));
    this._anchor_9 = this.renderer.createTemplateAnchor(this._el_7,(null as any));
    this._vc_9 = new import9.ViewContainer(9,7,this,this._anchor_9);
    this._TemplateRef_9_5 = new import28.TemplateRef_(this,9,this._anchor_9);
    this._NgSwitchCase_9_6 = new import26.Wrapper_NgSwitchCase(this._vc_9.vcRef,this._TemplateRef_9_5,this._NgSwitch_7_3.context);
    this._text_10 = this.renderer.createText(this._el_7,'\n                                ',(null as any));
    this._anchor_11 = this.renderer.createTemplateAnchor(this._el_7,(null as any));
    this._vc_11 = new import9.ViewContainer(11,7,this,this._anchor_11);
    this._TemplateRef_11_5 = new import28.TemplateRef_(this,11,this._anchor_11);
    this._NgSwitchDefault_11_6 = new import26.Wrapper_NgSwitchDefault(this._vc_11.vcRef,this._TemplateRef_11_5,this._NgSwitch_7_3.context);
    this._text_12 = this.renderer.createText(this._el_7,'\n                            ',(null as any));
    this._text_13 = this.renderer.createText((null as any),'\n                        ',(null as any));
    this.compView_2.create(this._InputComponent_2_3.context);
    this._text_14 = this.renderer.createText(this._el_0,'                        \n                    ',(null as any));
    this.init(this._el_0,((<any>this.renderer).directRenderer? (null as any): [
      this._el_0,
      this._text_1,
      this._el_2,
      this._text_3,
      this._el_4,
      this._text_5,
      this._text_6,
      this._el_7,
      this._text_8,
      this._anchor_9,
      this._text_10,
      this._anchor_11,
      this._text_12,
      this._text_13,
      this._text_14
    ]
    ),(null as any));
    return (null as any);
  }
  injectorGetInternal(token:any,requestNodeIndex:number,notFoundResult:any):any {
    if (((token === import28.TemplateRef) && (9 === requestNodeIndex))) { return this._TemplateRef_9_5; }
    if (((token === import29.NgSwitchCase) && (9 === requestNodeIndex))) { return this._NgSwitchCase_9_6.context; }
    if (((token === import28.TemplateRef) && (11 === requestNodeIndex))) { return this._TemplateRef_11_5; }
    if (((token === import29.NgSwitchDefault) && (11 === requestNodeIndex))) { return this._NgSwitchDefault_11_6.context; }
    if (((token === import29.NgSwitch) && ((7 <= requestNodeIndex) && (requestNodeIndex <= 12)))) { return this._NgSwitch_7_3.context; }
    if (((token === import24.InputComponent) && ((2 <= requestNodeIndex) && (requestNodeIndex <= 13)))) { return this._InputComponent_2_3.context; }
    if (((token === import30.FormGroupName) && ((0 <= requestNodeIndex) && (requestNodeIndex <= 14)))) { return this._FormGroupName_0_3.context; }
    if (((token === import31.ControlContainer) && ((0 <= requestNodeIndex) && (requestNodeIndex <= 14)))) { return this._ControlContainer_0_4; }
    if (((token === import21.NgControlStatusGroup) && ((0 <= requestNodeIndex) && (requestNodeIndex <= 14)))) { return this._NgControlStatusGroup_0_5.context; }
    return notFoundResult;
  }
  detectChangesInternal(throwOnChange:boolean):void {
    const currVal_0_0_0:any = this.context.index;
    this._FormGroupName_0_3.check_name(currVal_0_0_0,throwOnChange,false);
    this._FormGroupName_0_3.ngDoCheck(this,this._el_0,throwOnChange);
    this._NgControlStatusGroup_0_5.ngDoCheck(this,this._el_0,throwOnChange);
    const currVal_2_0_0:any = ((this.parentView.parentView.context.selectedType && this.parentView.parentView.context.selectedType.properties[this.context.index]) && this.parentView.parentView.context.selectedType.properties[this.context.index].description);
    this._InputComponent_2_3.check_tooltip(currVal_2_0_0,throwOnChange,false);
    if (this._InputComponent_2_3.ngDoCheck(this,this._el_2,throwOnChange)) { this.compView_2.markAsCheckOnce(); }
    const currVal_7_0_0:any = ((this.parentView.parentView.context.selectedType && this.parentView.parentView.context.selectedType.properties[this.context.index]) && this.parentView.parentView.context.selectedType.properties[this.context.index].type);
    this._NgSwitch_7_3.check_ngSwitch(currVal_7_0_0,throwOnChange,false);
    this._NgSwitch_7_3.ngDoCheck(this,this._el_7,throwOnChange);
    const currVal_9_0_0:any = 'int';
    this._NgSwitchCase_9_6.check_ngSwitchCase(currVal_9_0_0,throwOnChange,false);
    this._NgSwitchCase_9_6.ngDoCheck(this,this._anchor_9,throwOnChange);
    this._NgSwitchDefault_11_6.ngDoCheck(this,this._anchor_11,throwOnChange);
    this._vc_9.detectChangesInNestedViews(throwOnChange);
    this._vc_11.detectChangesInNestedViews(throwOnChange);
    this._NgControlStatusGroup_0_5.checkHost(this,this,this._el_0,throwOnChange);
    const currVal_27:any = import3.inlineInterpolate(1,'',this.context.$implicit.value.key,'');
    if (import3.checkBinding(throwOnChange,this._expr_27,currVal_27)) {
      this.renderer.setText(this._text_5,currVal_27);
      this._expr_27 = currVal_27;
    }
    this.compView_2.internalDetectChanges(throwOnChange);
  }
  destroyInternal():void {
    this._vc_9.destroyNestedViews();
    this._vc_11.destroyNestedViews();
    this.compView_2.destroy();
    this._FormGroupName_0_3.ngOnDestroy();
  }
  visitRootNodesInternal(cb:any,ctx:any):void {
    cb(this._el_0,ctx);
  }
  visitProjectableNodesInternal(nodeIndex:number,ngContentIndex:number,cb:any,ctx:any):void {
    if (((nodeIndex == 2) && (ngContentIndex == 0))) { cb(this._el_4,ctx); }
    if (((nodeIndex == 2) && (ngContentIndex == 1))) {
      cb(this._text_3,ctx);
      cb(this._text_6,ctx);
      cb(this._el_7,ctx);
      cb(this._text_13,ctx);
    }
  }
  createEmbeddedViewInternal(nodeIndex:number):import2.AppView<any> {
    if ((nodeIndex == 9)) { return new View_RuntimeSettingsComponent4(this.viewUtils,this,9,this._anchor_9,this._vc_9); }
    if ((nodeIndex == 11)) { return new View_RuntimeSettingsComponent5(this.viewUtils,this,11,this._anchor_11,this._vc_11); }
    return (null as any);
  }
}
class View_RuntimeSettingsComponent1 extends import2.AppView<any> {
  _el_0:any;
  _text_1:any;
  _anchor_2:any;
  /*private*/ _vc_2:import9.ViewContainer;
  _TemplateRef_2_5:any;
  _NgIf_2_6:import32.Wrapper_NgIf;
  _text_3:any;
  _el_4:any;
  _FormArrayName_4_3:import23.Wrapper_FormArrayName;
  _ControlContainer_4_4:any;
  _NgControlStatusGroup_4_5:import13.Wrapper_NgControlStatusGroup;
  _text_5:any;
  _anchor_6:any;
  /*private*/ _vc_6:import9.ViewContainer;
  _TemplateRef_6_5:any;
  _NgFor_6_6:import33.Wrapper_NgFor;
  _text_7:any;
  _text_8:any;
  constructor(viewUtils:import3.ViewUtils,parentView:import2.AppView<any>,parentIndex:number,parentElement:any,declaredViewContainer:import9.ViewContainer) {
    super(View_RuntimeSettingsComponent1,renderType_RuntimeSettingsComponent,import6.ViewType.EMBEDDED,viewUtils,parentView,parentIndex,parentElement,import7.ChangeDetectorStatus.CheckAlways,declaredViewContainer);
  }
  createInternal(rootSelector:string):import8.ComponentRef<any> {
    this._el_0 = import3.createRenderElement(this.renderer,(null as any),'div',import3.EMPTY_INLINE_ARRAY,(null as any));
    this._text_1 = this.renderer.createText(this._el_0,'\n                ',(null as any));
    this._anchor_2 = this.renderer.createTemplateAnchor(this._el_0,(null as any));
    this._vc_2 = new import9.ViewContainer(2,0,this,this._anchor_2);
    this._TemplateRef_2_5 = new import28.TemplateRef_(this,2,this._anchor_2);
    this._NgIf_2_6 = new import32.Wrapper_NgIf(this._vc_2.vcRef,this._TemplateRef_2_5);
    this._text_3 = this.renderer.createText(this._el_0,'\n                ',(null as any));
    this._el_4 = import3.createRenderElement(this.renderer,this._el_0,'div',new import3.InlineArray2(2,'formArrayName','setting'),(null as any));
    this._FormArrayName_4_3 = new import23.Wrapper_FormArrayName((<View_RuntimeSettingsComponent0>this.parentView)._ControlContainer_1_4,(null as any),(null as any));
    this._ControlContainer_4_4 = this._FormArrayName_4_3.context;
    this._NgControlStatusGroup_4_5 = new import13.Wrapper_NgControlStatusGroup(this._ControlContainer_4_4);
    this._text_5 = this.renderer.createText(this._el_4,'\n                    ',(null as any));
    this._anchor_6 = this.renderer.createTemplateAnchor(this._el_4,(null as any));
    this._vc_6 = new import9.ViewContainer(6,4,this,this._anchor_6);
    this._TemplateRef_6_5 = new import28.TemplateRef_(this,6,this._anchor_6);
    this._NgFor_6_6 = new import33.Wrapper_NgFor(this._vc_6.vcRef,this._TemplateRef_6_5,this.parentView.parentView.injectorGet(import34.IterableDiffers,this.parentView.parentIndex),this.parentView.ref);
    this._text_7 = this.renderer.createText(this._el_4,'\n                ',(null as any));
    this._text_8 = this.renderer.createText(this._el_0,'\n            ',(null as any));
    this.init(this._el_0,((<any>this.renderer).directRenderer? (null as any): [
      this._el_0,
      this._text_1,
      this._anchor_2,
      this._text_3,
      this._el_4,
      this._text_5,
      this._anchor_6,
      this._text_7,
      this._text_8
    ]
    ),(null as any));
    return (null as any);
  }
  injectorGetInternal(token:any,requestNodeIndex:number,notFoundResult:any):any {
    if (((token === import28.TemplateRef) && (2 === requestNodeIndex))) { return this._TemplateRef_2_5; }
    if (((token === import35.NgIf) && (2 === requestNodeIndex))) { return this._NgIf_2_6.context; }
    if (((token === import28.TemplateRef) && (6 === requestNodeIndex))) { return this._TemplateRef_6_5; }
    if (((token === import36.NgFor) && (6 === requestNodeIndex))) { return this._NgFor_6_6.context; }
    if (((token === import30.FormArrayName) && ((4 <= requestNodeIndex) && (requestNodeIndex <= 7)))) { return this._FormArrayName_4_3.context; }
    if (((token === import31.ControlContainer) && ((4 <= requestNodeIndex) && (requestNodeIndex <= 7)))) { return this._ControlContainer_4_4; }
    if (((token === import21.NgControlStatusGroup) && ((4 <= requestNodeIndex) && (requestNodeIndex <= 7)))) { return this._NgControlStatusGroup_4_5.context; }
    return notFoundResult;
  }
  detectChangesInternal(throwOnChange:boolean):void {
    const currVal_2_0_0:any = (this.parentView.context.showTitle === true);
    this._NgIf_2_6.check_ngIf(currVal_2_0_0,throwOnChange,false);
    this._NgIf_2_6.ngDoCheck(this,this._anchor_2,throwOnChange);
    const currVal_4_0_0:any = 'setting';
    this._FormArrayName_4_3.check_name(currVal_4_0_0,throwOnChange,false);
    this._FormArrayName_4_3.ngDoCheck(this,this._el_4,throwOnChange);
    this._NgControlStatusGroup_4_5.ngDoCheck(this,this._el_4,throwOnChange);
    const currVal_6_0_0:any = this.parentView.context.form.get('setting').controls;
    this._NgFor_6_6.check_ngForOf(currVal_6_0_0,throwOnChange,false);
    this._NgFor_6_6.ngDoCheck(this,this._anchor_6,throwOnChange);
    this._vc_2.detectChangesInNestedViews(throwOnChange);
    this._vc_6.detectChangesInNestedViews(throwOnChange);
    this._NgControlStatusGroup_4_5.checkHost(this,this,this._el_4,throwOnChange);
  }
  destroyInternal():void {
    this._vc_2.destroyNestedViews();
    this._vc_6.destroyNestedViews();
    this._FormArrayName_4_3.ngOnDestroy();
  }
  visitRootNodesInternal(cb:any,ctx:any):void {
    cb(this._el_0,ctx);
  }
  createEmbeddedViewInternal(nodeIndex:number):import2.AppView<any> {
    if ((nodeIndex == 2)) { return new View_RuntimeSettingsComponent2(this.viewUtils,this,2,this._anchor_2,this._vc_2); }
    if ((nodeIndex == 6)) { return new View_RuntimeSettingsComponent3(this.viewUtils,this,6,this._anchor_6,this._vc_6); }
    return (null as any);
  }
}
var renderType_RuntimeSettingsComponent:import4.RenderComponentType = import3.createRenderComponentType('',0,import5.ViewEncapsulation.None,styles_RuntimeSettingsComponent,{});
export class View_RuntimeSettingsComponent0 extends import2.AppView<import0.RuntimeSettingsComponent> {
  _text_0:any;
  _el_1:any;
  _FormGroupDirective_1_3:import37.Wrapper_FormGroupDirective;
  _ControlContainer_1_4:any;
  _NgControlStatusGroup_1_5:import13.Wrapper_NgControlStatusGroup;
  _text_2:any;
  _anchor_3:any;
  /*private*/ _vc_3:import9.ViewContainer;
  _TemplateRef_3_5:any;
  _NgIf_3_6:import32.Wrapper_NgIf;
  _text_4:any;
  _text_5:any;
  constructor(viewUtils:import3.ViewUtils,parentView:import2.AppView<any>,parentIndex:number,parentElement:any) {
    super(View_RuntimeSettingsComponent0,renderType_RuntimeSettingsComponent,import6.ViewType.COMPONENT,viewUtils,parentView,parentIndex,parentElement,import7.ChangeDetectorStatus.CheckOnce);
  }
  createInternal(rootSelector:string):import8.ComponentRef<any> {
    const parentRenderNode:any = this.renderer.createViewRoot(this.parentElement);
    this._text_0 = this.renderer.createText(parentRenderNode,'\n        ',(null as any));
    this._el_1 = import3.createRenderElement(this.renderer,parentRenderNode,'form',import3.EMPTY_INLINE_ARRAY,(null as any));
    this._FormGroupDirective_1_3 = new import37.Wrapper_FormGroupDirective((null as any),(null as any));
    this._ControlContainer_1_4 = this._FormGroupDirective_1_3.context;
    this._NgControlStatusGroup_1_5 = new import13.Wrapper_NgControlStatusGroup(this._ControlContainer_1_4);
    this._text_2 = this.renderer.createText(this._el_1,'\n            ',(null as any));
    this._anchor_3 = this.renderer.createTemplateAnchor(this._el_1,(null as any));
    this._vc_3 = new import9.ViewContainer(3,1,this,this._anchor_3);
    this._TemplateRef_3_5 = new import28.TemplateRef_(this,3,this._anchor_3);
    this._NgIf_3_6 = new import32.Wrapper_NgIf(this._vc_3.vcRef,this._TemplateRef_3_5);
    this._text_4 = this.renderer.createText(this._el_1,'\n        ',(null as any));
    this._text_5 = this.renderer.createText(parentRenderNode,'\n    ',(null as any));
    var disposable_0:Function = import3.subscribeToRenderElement(this,this._el_1,new import3.InlineArray4(4,'submit',(null as any),'reset',(null as any)),this.eventHandler(this.handleEvent_1));
    this.init((null as any),((<any>this.renderer).directRenderer? (null as any): [
      this._text_0,
      this._el_1,
      this._text_2,
      this._anchor_3,
      this._text_4,
      this._text_5
    ]
    ),[disposable_0]);
    return (null as any);
  }
  injectorGetInternal(token:any,requestNodeIndex:number,notFoundResult:any):any {
    if (((token === import28.TemplateRef) && (3 === requestNodeIndex))) { return this._TemplateRef_3_5; }
    if (((token === import35.NgIf) && (3 === requestNodeIndex))) { return this._NgIf_3_6.context; }
    if (((token === import38.FormGroupDirective) && ((1 <= requestNodeIndex) && (requestNodeIndex <= 4)))) { return this._FormGroupDirective_1_3.context; }
    if (((token === import31.ControlContainer) && ((1 <= requestNodeIndex) && (requestNodeIndex <= 4)))) { return this._ControlContainer_1_4; }
    if (((token === import21.NgControlStatusGroup) && ((1 <= requestNodeIndex) && (requestNodeIndex <= 4)))) { return this._NgControlStatusGroup_1_5.context; }
    return notFoundResult;
  }
  detectChangesInternal(throwOnChange:boolean):void {
    const currVal_1_0_0:any = this.context.form;
    this._FormGroupDirective_1_3.check_form(currVal_1_0_0,throwOnChange,false);
    this._FormGroupDirective_1_3.ngDoCheck(this,this._el_1,throwOnChange);
    this._NgControlStatusGroup_1_5.ngDoCheck(this,this._el_1,throwOnChange);
    const currVal_3_0_0:boolean = !!this.context.form.get('setting');
    this._NgIf_3_6.check_ngIf(currVal_3_0_0,throwOnChange,false);
    this._NgIf_3_6.ngDoCheck(this,this._anchor_3,throwOnChange);
    this._vc_3.detectChangesInNestedViews(throwOnChange);
    this._NgControlStatusGroup_1_5.checkHost(this,this,this._el_1,throwOnChange);
  }
  destroyInternal():void {
    this._vc_3.destroyNestedViews();
    this._FormGroupDirective_1_3.ngOnDestroy();
  }
  createEmbeddedViewInternal(nodeIndex:number):import2.AppView<any> {
    if ((nodeIndex == 3)) { return new View_RuntimeSettingsComponent1(this.viewUtils,this,3,this._anchor_3,this._vc_3); }
    return (null as any);
  }
  handleEvent_1(eventName:string,$event:any):boolean {
    this.markPathToRootAsCheckOnce();
    var result:boolean = true;
    result = (this._FormGroupDirective_1_3.handleEvent(eventName,$event) && result);
    return result;
  }
}