<?xml version="1.0"?>
<doc>
    <assembly>
        <name>Eu.EDelivery.AS4.Fe</name>
    </assembly>
    <members>
        <member name="T:Eu.EDelivery.AS4.Fe.AlreadyExistsException">
            <summary>
            Type of business exception thrown to indicate that the requested entity already exists
            </summary>
            <seealso cref="T:Eu.EDelivery.AS4.Fe.BusinessException" />
        </member>
        <member name="M:Eu.EDelivery.AS4.Fe.AlreadyExistsException.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Eu.EDelivery.AS4.Fe.AlreadyExistsException"/> class.
            </summary>
            <param name="message">The message that describes the error.</param>
        </member>
        <member name="M:Eu.EDelivery.AS4.Fe.Authentication.ApplicationDbContext.#ctor(Microsoft.EntityFrameworkCore.DbContextOptions{Eu.EDelivery.AS4.Fe.Authentication.ApplicationDbContext})">
            <summary>
            Initializes a new instance of the <see cref="T:Eu.EDelivery.AS4.Fe.Authentication.ApplicationDbContext"/> class.
            </summary>
            <param name="options">The options.</param>
        </member>
        <member name="T:Eu.EDelivery.AS4.Fe.Authentication.AuthenticationController">
            <summary>
            Authentication controller
            </summary>
            <seealso cref="T:Microsoft.AspNetCore.Mvc.Controller" />
        </member>
        <member name="M:Eu.EDelivery.AS4.Fe.Authentication.AuthenticationController.#ctor(Eu.EDelivery.AS4.Fe.Authentication.ITokenService,Microsoft.AspNetCore.Identity.UserManager{Eu.EDelivery.AS4.Fe.Authentication.ApplicationUser})">
            <summary>
            Initializes a new instance of the <see cref="T:Eu.EDelivery.AS4.Fe.Authentication.AuthenticationController"/> class.
            </summary>
            <param name="tokenService">The token service.</param>
            <param name="userManager">The user manager.</param>
        </member>
        <member name="M:Eu.EDelivery.AS4.Fe.Authentication.AuthenticationController.Login(Eu.EDelivery.AS4.Fe.Models.LoginModel)">
            <summary>
            Login using username / password combination
            </summary>
            <param name="login">The login payload</param>
            <returns>
            Json containing access token if login has succeeded
            </returns>
        </member>
        <member name="M:Eu.EDelivery.AS4.Fe.Authentication.AuthenticationController.ExternalLogin(System.String)">
            <summary>
            Login using external provider
            </summary>
            <param name="provider">The name of the provider</param>
            <returns></returns>
        </member>
        <member name="M:Eu.EDelivery.AS4.Fe.Authentication.AuthenticationController.ExternalLoginCallback(System.String)">
            <summary>
            Callback url used for external providers after login
            </summary>
            <param name="provider">The name of the provider</param>
            <returns></returns>
        </member>
        <member name="T:Eu.EDelivery.AS4.Fe.Authentication.AuthenticationSetup">
            <summary>
            Setup authentication
            </summary>
            <seealso cref="T:Eu.EDelivery.AS4.Fe.Authentication.IAuthenticationSetup" />
        </member>
        <member name="T:Eu.EDelivery.AS4.Fe.Authentication.IAuthenticationSetup">
            <summary>
            Setup authentication
            </summary>
            <seealso cref="T:Eu.EDelivery.AS4.Fe.Modules.IModular" />
            <seealso cref="T:Eu.EDelivery.AS4.Fe.Modules.IRunAtServicesStartup" />
            <seealso cref="T:Eu.EDelivery.AS4.Fe.Modules.IRunAtAppConfiguration" />
        </member>
        <member name="T:Eu.EDelivery.AS4.Fe.Authentication.LoginSuccessModel">
            <summary>
            Model containing successful login data
            </summary>
        </member>
        <member name="P:Eu.EDelivery.AS4.Fe.Authentication.LoginSuccessModel.AccessToken">
            <summary>
            Gets or sets the access token.
            </summary>
            <value>
            The access token.
            </value>
        </member>
        <member name="T:Eu.EDelivery.AS4.Fe.BusinessException">
            <summary>
            Exception class to carry business exceptions
            </summary>
            <seealso cref="T:System.Exception" />
        </member>
        <member name="M:Eu.EDelivery.AS4.Fe.BusinessException.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Eu.EDelivery.AS4.Fe.BusinessException"/> class.
            </summary>
            <param name="message">The message that describes the error.</param>
        </member>
        <member name="T:Eu.EDelivery.AS4.Fe.Controllers.ConfigurationController">
            <summary>
            Controller to manage settings.xml
            </summary>
            <seealso cref="T:Microsoft.AspNetCore.Mvc.Controller" />
        </member>
        <member name="M:Eu.EDelivery.AS4.Fe.Controllers.ConfigurationController.#ctor(Eu.EDelivery.AS4.Fe.Settings.IAs4SettingsService,Eu.EDelivery.AS4.Fe.Logging.ILogging,Microsoft.Extensions.Options.IOptions{Eu.EDelivery.AS4.Fe.Controllers.PortalSettings},Eu.EDelivery.AS4.Fe.Controllers.IPortalSettingsService)">
            <summary>
            Initializes a new instance of the <see cref="T:Eu.EDelivery.AS4.Fe.Controllers.ConfigurationController" /> class.
            </summary>
            <param name="settingsService">The settings service.</param>
            <param name="logging">The logging.</param>
            <param name="portalSettings">The portal settings.</param>
            <param name="portalSettingsService">The portal settings service.</param>
        </member>
        <member name="M:Eu.EDelivery.AS4.Fe.Controllers.ConfigurationController.Get">
            <summary>
            Get settings
            </summary>
            <returns>Settings object</returns>
        </member>
        <member name="M:Eu.EDelivery.AS4.Fe.Controllers.ConfigurationController.GetRuntimeSettings">
            <summary>
            Gets the portal settings.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Eu.EDelivery.AS4.Fe.Controllers.ConfigurationController.SavePortalSettings(Eu.EDelivery.AS4.Fe.Controllers.PortalSettings)">
            <summary>
            Saves the portal settings.
            </summary>
            <param name="settings">The settings.</param>
            <returns></returns>
        </member>
        <member name="M:Eu.EDelivery.AS4.Fe.Controllers.ConfigurationController.SaveBaseSettings(Eu.EDelivery.AS4.Fe.Models.BaseSettings)">
            <summary>
            Save basic settings
            </summary>
            <param name="settings">The settings.</param>
            <returns>OkResult</returns>
        </member>
        <member name="M:Eu.EDelivery.AS4.Fe.Controllers.ConfigurationController.SaveCustomSettings(Eu.EDelivery.AS4.Model.Internal.CustomSettings)">
            <summary>
            Save custom settings
            </summary>
            <param name="settings">The settings.</param>
            <returns>OkResult</returns>
        </member>
        <member name="M:Eu.EDelivery.AS4.Fe.Controllers.ConfigurationController.SaveDatabaseSettings(Eu.EDelivery.AS4.Model.Internal.SettingsDatabase)">
            <summary>
            Saves the database settings.
            </summary>
            <param name="settings">The settings.</param>
            <returns>OkResult</returns>
        </member>
        <member name="M:Eu.EDelivery.AS4.Fe.Controllers.ConfigurationController.CreateSubmitAgent(Eu.EDelivery.AS4.Model.Internal.AgentSettings)">
            <summary>
            Create a submit agent
            </summary>
            <param name="settingsAgent">The submit agent agent.</param>
            <returns>OkResult</returns>
        </member>
        <member name="M:Eu.EDelivery.AS4.Fe.Controllers.ConfigurationController.DeleteSubmitAgent(System.String)">
            <summary>
            Delete a submit agent
            </summary>
            <param name="name">The name of the submit agent.</param>
            <returns>OkResult</returns>
        </member>
        <member name="M:Eu.EDelivery.AS4.Fe.Controllers.ConfigurationController.UpdateSubmitAgent(Eu.EDelivery.AS4.Model.Internal.AgentSettings,System.String)">
            <summary>
            Update an existing submit agent
            </summary>
            <param name="settingsAgent">The settings agent.</param>
            <param name="originalName">Name of the original.</param>
            <returns></returns>
        </member>
        <member name="M:Eu.EDelivery.AS4.Fe.Controllers.ConfigurationController.UpdateOutboundProcessingAgent(Eu.EDelivery.AS4.Model.Internal.AgentSettings,System.String)">
            <summary>
            Updates the outbound processing agent.
            </summary>
            <param name="settingsAgent">The settings agent.</param>
            <param name="originalName">Name of the original.</param>
            <returns></returns>
        </member>
        <member name="M:Eu.EDelivery.AS4.Fe.Controllers.ConfigurationController.CreateOutboundProcessingAgentAgent(Eu.EDelivery.AS4.Model.Internal.AgentSettings)">
            <summary>
            Creates the outbound processing agent agent.
            </summary>
            <param name="settingsAgent">The settings agent.</param>
            <returns></returns>
        </member>
        <member name="M:Eu.EDelivery.AS4.Fe.Controllers.ConfigurationController.DeleteOutboundProcessingAgentAgent(System.String)">
            <summary>
            Deletes the outbound processing agent agent.
            </summary>
            <param name="name">The name.</param>
            <returns></returns>
        </member>
        <member name="M:Eu.EDelivery.AS4.Fe.Controllers.ConfigurationController.CreateSendAgent(Eu.EDelivery.AS4.Model.Internal.AgentSettings)">
            <summary>
            Creates the send agent.
            </summary>
            <param name="settingsAgent">The settings agent.</param>
            <returns></returns>
        </member>
        <member name="M:Eu.EDelivery.AS4.Fe.Controllers.ConfigurationController.DeleteSendAgent(System.String)">
            <summary>
            Deletes the send agent.
            </summary>
            <param name="name">The name.</param>
            <returns></returns>
        </member>
        <member name="M:Eu.EDelivery.AS4.Fe.Controllers.ConfigurationController.UpdateSendAgent(Eu.EDelivery.AS4.Model.Internal.AgentSettings,System.String)">
            <summary>
            Updates the send agent.
            </summary>
            <param name="settingsAgent">The settings agent.</param>
            <param name="originalName">Name of the original.</param>
            <returns></returns>
        </member>
        <member name="M:Eu.EDelivery.AS4.Fe.Controllers.ConfigurationController.CreateReceiveAgent(Eu.EDelivery.AS4.Model.Internal.AgentSettings)">
            <summary>
            Creates the receive agent.
            </summary>
            <param name="settingsAgent">The settings agent.</param>
            <returns></returns>
        </member>
        <member name="M:Eu.EDelivery.AS4.Fe.Controllers.ConfigurationController.DeleteReceiveAgent(System.String)">
            <summary>
            Deletes the receive agent.
            </summary>
            <param name="name">The name.</param>
            <returns></returns>
        </member>
        <member name="M:Eu.EDelivery.AS4.Fe.Controllers.ConfigurationController.UpdateReceiveAgent(Eu.EDelivery.AS4.Model.Internal.AgentSettings,System.String)">
            <summary>
            Updates the receive agent.
            </summary>
            <param name="settingsAgent">The settings agent.</param>
            <param name="originalName">Name of the original.</param>
            <returns></returns>
        </member>
        <member name="M:Eu.EDelivery.AS4.Fe.Controllers.ConfigurationController.CreateDeliverAgent(Eu.EDelivery.AS4.Model.Internal.AgentSettings)">
            <summary>
            Creates the deliver agent.
            </summary>
            <param name="settingsAgent">The settings agent.</param>
            <returns></returns>
        </member>
        <member name="M:Eu.EDelivery.AS4.Fe.Controllers.ConfigurationController.DeleteDeliverAgent(System.String)">
            <summary>
            Deletes the deliver agent.
            </summary>
            <param name="name">The name.</param>
            <returns></returns>
        </member>
        <member name="M:Eu.EDelivery.AS4.Fe.Controllers.ConfigurationController.UpdateDeliverAgent(Eu.EDelivery.AS4.Model.Internal.AgentSettings,System.String)">
            <summary>
            Updates the deliver agent.
            </summary>
            <param name="settingsAgent">The settings agent.</param>
            <param name="originalName">Name of the original.</param>
            <returns></returns>
        </member>
        <member name="M:Eu.EDelivery.AS4.Fe.Controllers.ConfigurationController.CreateNotifyConsumerAgent(Eu.EDelivery.AS4.Model.Internal.AgentSettings)">
            <summary>
            Creates the notify consumer agent.
            </summary>
            <param name="settingsAgent">The settings agent.</param>
            <returns></returns>
        </member>
        <member name="M:Eu.EDelivery.AS4.Fe.Controllers.ConfigurationController.DeleteNotifyConsumerAgent(System.String)">
            <summary>
            Deletes the notify consumer agent.
            </summary>
            <param name="name">The name.</param>
            <returns></returns>
        </member>
        <member name="M:Eu.EDelivery.AS4.Fe.Controllers.ConfigurationController.UpdateNotifyConsumerAgent(Eu.EDelivery.AS4.Model.Internal.AgentSettings,System.String)">
            <summary>
            Updates the notify consumer agent.
            </summary>
            <param name="settingsAgent">The settings agent.</param>
            <param name="originalName">Name of the original.</param>
            <returns></returns>
        </member>
        <member name="M:Eu.EDelivery.AS4.Fe.Controllers.ConfigurationController.CreateNotifyProducerAgent(Eu.EDelivery.AS4.Model.Internal.AgentSettings)">
            <summary>
            Creates the notify producer agent.
            </summary>
            <param name="settingsAgent">The settings agent.</param>
            <returns></returns>
        </member>
        <member name="M:Eu.EDelivery.AS4.Fe.Controllers.ConfigurationController.DeleteNotifyProducerAgent(System.String)">
            <summary>
            Deletes the notify producer agent.
            </summary>
            <param name="name">The name.</param>
            <returns></returns>
        </member>
        <member name="M:Eu.EDelivery.AS4.Fe.Controllers.ConfigurationController.UpdateNotifyProducerAgent(Eu.EDelivery.AS4.Model.Internal.AgentSettings,System.String)">
            <summary>
            Updates the notify producer agent.
            </summary>
            <param name="settingsAgent">The settings agent.</param>
            <param name="originalName">Name of the original.</param>
            <returns></returns>
        </member>
        <member name="M:Eu.EDelivery.AS4.Fe.Controllers.ConfigurationController.CreateReceptionAwarenessAgent(Eu.EDelivery.AS4.Model.Internal.AgentSettings)">
            <summary>
            Creates the reception awareness agent.
            </summary>
            <param name="settingsAgent">The settings agent.</param>
            <returns></returns>
        </member>
        <member name="M:Eu.EDelivery.AS4.Fe.Controllers.ConfigurationController.DeleteReceptionAwarenessAgent(System.String)">
            <summary>
            Deletes the reception awareness agent.
            </summary>
            <param name="name">The name.</param>
            <returns></returns>
        </member>
        <member name="M:Eu.EDelivery.AS4.Fe.Controllers.ConfigurationController.UpdateReceptionAwarenessAgent(Eu.EDelivery.AS4.Model.Internal.AgentSettings,System.String)">
            <summary>
            Updates the reception awareness agent.
            </summary>
            <param name="settingsAgent">The settings agent.</param>
            <param name="originalName">Name of the original.</param>
            <returns></returns>
        </member>
        <member name="M:Eu.EDelivery.AS4.Fe.Controllers.ConfigurationController.CreatePullReceiveAgent(Eu.EDelivery.AS4.Model.Internal.AgentSettings)">
            <summary>
            Creates the pull receive agent.
            </summary>
            <param name="settingsAgent">The settings agent.</param>
            <returns></returns>
        </member>
        <member name="M:Eu.EDelivery.AS4.Fe.Controllers.ConfigurationController.DeletePullReceiveAgent(System.String)">
            <summary>
            Deletes the pull receive agent.
            </summary>
            <param name="name">The name.</param>
            <returns></returns>
        </member>
        <member name="M:Eu.EDelivery.AS4.Fe.Controllers.ConfigurationController.UpdatePullReceiveAgent(Eu.EDelivery.AS4.Model.Internal.AgentSettings,System.String)">
            <summary>
            Updates the pull receive agent.
            </summary>
            <param name="settingsAgent">The settings agent.</param>
            <param name="originalName">Name of the original.</param>
            <returns></returns>
        </member>
        <member name="M:Eu.EDelivery.AS4.Fe.Controllers.ConfigurationController.CreatePullSendAgent(Eu.EDelivery.AS4.Model.Internal.AgentSettings)">
            <summary>
            Creates the pull send agent.
            </summary>
            <param name="settingsAgent">The settings agent.</param>
            <returns></returns>
        </member>
        <member name="M:Eu.EDelivery.AS4.Fe.Controllers.ConfigurationController.DeletePullSendAgent(System.String)">
            <summary>
            Deletes the pull send agent.
            </summary>
            <param name="name">The name.</param>
            <returns></returns>
        </member>
        <member name="M:Eu.EDelivery.AS4.Fe.Controllers.ConfigurationController.UpdatePullSendAgent(Eu.EDelivery.AS4.Model.Internal.AgentSettings,System.String)">
            <summary>
            Updates the pull send agent.
            </summary>
            <param name="settingsAgent">The settings agent.</param>
            <param name="originalName">Name of the original.</param>
            <returns></returns>
        </member>
        <member name="T:Eu.EDelivery.AS4.Fe.Controllers.IPortalSettingsService">
            <summary>
            Interface to be implemented to manage portal settings
            </summary>
        </member>
        <member name="M:Eu.EDelivery.AS4.Fe.Controllers.IPortalSettingsService.Save(Eu.EDelivery.AS4.Fe.Controllers.PortalSettings)">
            <summary>
            Saves the specified save.
            </summary>
            <param name="save">The save.</param>
            <returns></returns>
        </member>
        <member name="T:Eu.EDelivery.AS4.Fe.Controllers.PortalSettings">
            <summary>
            Class containing all the Portal settings
            </summary>
        </member>
        <member name="P:Eu.EDelivery.AS4.Fe.Controllers.PortalSettings.Url">
            <summary>
            Gets or sets the start URL.
            </summary>
            <value>
            The start URL.
            </value>
        </member>
        <member name="P:Eu.EDelivery.AS4.Fe.Controllers.PortalSettings.Settings">
            <summary>
            Gets or sets the settings.
            </summary>
            <value>
            The settings.
            </value>
        </member>
        <member name="P:Eu.EDelivery.AS4.Fe.Controllers.PortalSettings.Authentication">
            <summary>
            Gets or sets the authentication.
            </summary>
            <value>
            The authentication.
            </value>
        </member>
        <member name="P:Eu.EDelivery.AS4.Fe.Controllers.PortalSettings.Monitor">
            <summary>
            Gets or sets the monitor.
            </summary>
            <value>
            The monitor.
            </value>
        </member>
        <member name="P:Eu.EDelivery.AS4.Fe.Controllers.PortalSettings.Pmodes">
            <summary>
            Gets or sets the pmodes.
            </summary>
            <value>
            The pmodes.
            </value>
        </member>
        <member name="P:Eu.EDelivery.AS4.Fe.Controllers.PortalSettings.SubmitTool">
            <summary>
            Gets or sets the submit tool.
            </summary>
            <value>
            The submit tool.
            </value>
        </member>
        <member name="T:Eu.EDelivery.AS4.Fe.Controllers.PortalSettingsService">
            <summary>
            Implementation to manage portal settings using appsettings.json
            </summary>
            <seealso cref="T:Eu.EDelivery.AS4.Fe.Controllers.IPortalSettingsService" />
        </member>
        <member name="M:Eu.EDelivery.AS4.Fe.Controllers.PortalSettingsService.#ctor(Microsoft.AspNetCore.Hosting.IHostingEnvironment)">
            <summary>
            Initializes a new instance of the <see cref="T:Eu.EDelivery.AS4.Fe.Controllers.PortalSettingsService"/> class.
            </summary>
            <param name="hostingEnvironment">The hosting environment.</param>
        </member>
        <member name="M:Eu.EDelivery.AS4.Fe.Controllers.PortalSettingsService.Save(Eu.EDelivery.AS4.Fe.Controllers.PortalSettings)">
            <summary>
            Saves the specified save.
            </summary>
            <param name="save">The save.</param>
            <returns></returns>
        </member>
        <member name="T:Eu.EDelivery.AS4.Fe.ErrorModel">
            <summary>
            Model representing an error
            </summary>
        </member>
        <member name="P:Eu.EDelivery.AS4.Fe.ErrorModel.IsError">
            <summary>
            Gets or sets a value indicating whether this instance is error.
            </summary>
        </member>
        <member name="P:Eu.EDelivery.AS4.Fe.ErrorModel.Message">
            <summary>
            Gets or sets the message.
            </summary>
            <value>
            The message.
            </value>
        </member>
        <member name="P:Eu.EDelivery.AS4.Fe.ErrorModel.Exception">
            <summary>
            Gets or sets the exception.
            </summary>
            <value>
            The exception.
            </value>
        </member>
        <member name="T:Eu.EDelivery.AS4.Fe.ErrorResponse">
            <summary>
            To be returned to the client to indicate an error.
            </summary>
        </member>
        <member name="P:Eu.EDelivery.AS4.Fe.ErrorResponse.Type">
            <summary>
            Gets or sets the type.
            </summary>
            <value>
            The type.
            </value>
        </member>
        <member name="P:Eu.EDelivery.AS4.Fe.ErrorResponse.ExceptionType">
            <summary>
            Gets or sets the type of the exception.
            </summary>
            <value>
            The type of the exception.
            </value>
        </member>
        <member name="P:Eu.EDelivery.AS4.Fe.ErrorResponse.Exception">
            <summary>
            Gets or sets the exception.
            This contains the stack trace if enabled
            </summary>
            <value>
            The exception.
            </value>
        </member>
        <member name="P:Eu.EDelivery.AS4.Fe.ErrorResponse.Message">
            <summary>
            Gets or sets the message.
            </summary>
            <value>
            The message.
            </value>
        </member>
        <member name="T:Eu.EDelivery.AS4.Fe.Modules.IRunAtAppConfiguration">
            <summary>
            Setup settings at config time
            </summary>
            <seealso cref="T:Eu.EDelivery.AS4.Fe.Modules.ILifeCycleHook" />
        </member>
        <member name="M:Eu.EDelivery.AS4.Fe.Modules.IRunAtAppConfiguration.Run(Microsoft.AspNetCore.Builder.IApplicationBuilder)">
            <summary>
            Setup at configuration time
            </summary>
            <param name="app">The application.</param>
        </member>
        <member name="T:Eu.EDelivery.AS4.Fe.Modules.IRunAtServicesStartup">
            <summary>
            Setup at services startup
            </summary>
            <seealso cref="T:Eu.EDelivery.AS4.Fe.Modules.ILifeCycleHook" />
        </member>
        <member name="M:Eu.EDelivery.AS4.Fe.Modules.IRunAtServicesStartup.Run(Microsoft.Extensions.DependencyInjection.IServiceCollection,Microsoft.Extensions.Configuration.IConfigurationRoot)">
            <summary>
            Run at services setup
            </summary>
            <param name="services">The services.</param>
            <param name="configuration">The configuration.</param>
        </member>
        <member name="T:Eu.EDelivery.AS4.Fe.Modules.ModuleExtensions">
            <summary>
            Extension class to do module management
            </summary>
        </member>
        <member name="M:Eu.EDelivery.AS4.Fe.Modules.ModuleExtensions.AddModules(Microsoft.Extensions.DependencyInjection.IServiceCollection,System.Collections.Generic.Dictionary{System.String,System.String},System.Action{Microsoft.Extensions.Configuration.IConfigurationBuilder,Microsoft.AspNetCore.Hosting.IHostingEnvironment},Microsoft.Extensions.Configuration.IConfigurationRoot@,System.String)">
            <summary>
                Setup module loading
            </summary>
            <param name="services"></param>
            <param name="mappings"></param>
            <param name="configBuilder"></param>
            <param name="configuration"></param>
            <param name="folderToScan"></param>
        </member>
        <member name="T:Eu.EDelivery.AS4.Fe.Monitor.BuilderExtensions">
            <summary>
            Middleware to use SignalR with .net core
            </summary>
        </member>
        <member name="M:Eu.EDelivery.AS4.Fe.Monitor.BuilderExtensions.UseAppBuilder(Microsoft.AspNetCore.Builder.IApplicationBuilder,System.Action{Owin.IAppBuilder})">
            <summary>
            Uses the application builder.
            </summary>
            <param name="app">The application.</param>
            <param name="configure">The configure.</param>
            <returns></returns>
        </member>
        <member name="M:Eu.EDelivery.AS4.Fe.Monitor.BuilderExtensions.UseSignalR2(Microsoft.AspNetCore.Builder.IApplicationBuilder)">
            <summary>
            Uses the signal r2.
            </summary>
            <param name="app">The application.</param>
        </member>
        <member name="T:Eu.EDelivery.AS4.Fe.Monitor.Client">
            <summary>
            Implementation of the IClient to send messages using SignalR
            </summary>
            <seealso cref="T:Eu.EDelivery.AS4.Fe.Monitor.IClient" />
        </member>
        <member name="M:Eu.EDelivery.AS4.Fe.Monitor.Client.SendInfo(System.String)">
            <summary>
            Send info log
            </summary>
            <param name="message">The message.</param>
        </member>
        <member name="M:Eu.EDelivery.AS4.Fe.Monitor.Client.SendPmode(System.String)">
            <summary>
            Send log containing PMode
            </summary>
            <param name="pmode">The pmode.</param>
        </member>
        <member name="M:Eu.EDelivery.AS4.Fe.Monitor.Client.SendAs4Message(System.String,System.String)">
            <summary>
            Sendg log containing an AS4 message
            </summary>
            <param name="message">The message.</param>
            <param name="id">The id of the AS4 message</param>
        </member>
        <member name="M:Eu.EDelivery.AS4.Fe.Monitor.Client.SendError(System.String)">
            <summary>
            Sends log containing error
            </summary>
            <param name="message">The message.</param>
        </member>
        <member name="T:Eu.EDelivery.AS4.Fe.Monitor.ClientMessage">
            <summary>
            Object to hold a log message to send to the client
            </summary>
        </member>
        <member name="P:Eu.EDelivery.AS4.Fe.Monitor.ClientMessage.Message">
            <summary>
            Gets or sets the message.
            </summary>
            <value>
            The message.
            </value>
        </member>
        <member name="P:Eu.EDelivery.AS4.Fe.Monitor.ClientMessage.Type">
            <summary>
            Gets or sets the type.
            </summary>
            <value>
            The type.
            </value>
        </member>
        <member name="P:Eu.EDelivery.AS4.Fe.Monitor.ClientMessage.Data">
            <summary>
            Gets or sets the data.
            </summary>
            <value>
            The data.
            </value>
        </member>
        <member name="T:Eu.EDelivery.AS4.Fe.Monitor.IClient">
            <summary>
            Interface to be implemented to send Submit tool messages to the client
            </summary>
        </member>
        <member name="M:Eu.EDelivery.AS4.Fe.Monitor.IClient.SendInfo(System.String)">
            <summary>
            Send info log
            </summary>
            <param name="message">The message.</param>
        </member>
        <member name="M:Eu.EDelivery.AS4.Fe.Monitor.IClient.SendPmode(System.String)">
            <summary>
            Send log containing PMode
            </summary>
            <param name="pmode">The pmode.</param>
        </member>
        <member name="M:Eu.EDelivery.AS4.Fe.Monitor.IClient.SendError(System.String)">
            <summary>
            Sends log containing error
            </summary>
            <param name="message">The message.</param>
        </member>
        <member name="M:Eu.EDelivery.AS4.Fe.Monitor.IClient.SendAs4Message(System.String,System.String)">
            <summary>
            Sendg log containing an AS4 message
            </summary>
            <param name="message">The message.</param>
            <param name="id">The id of the AS4 message</param>
        </member>
        <member name="T:Eu.EDelivery.AS4.Fe.Monitor.IMonitorService">
            <summary>
            Interface to implement a monitor service
            </summary>
        </member>
        <member name="M:Eu.EDelivery.AS4.Fe.Monitor.IMonitorService.GetExceptions(Eu.EDelivery.AS4.Fe.Monitor.Model.ExceptionFilter)">
            <summary>
            Gets the exceptions.
            </summary>
            <param name="filter">Exception filter object</param>
            <returns></returns>
            <exception cref="T:System.ArgumentNullException">filter - Filter must be supplied
            or
            Direction - Direction cannot be null</exception>
            <exception cref="T:Eu.EDelivery.AS4.Fe.BusinessException">Could not get any exceptions, something went wrong.</exception>
        </member>
        <member name="M:Eu.EDelivery.AS4.Fe.Monitor.IMonitorService.GetMessages(Eu.EDelivery.AS4.Fe.Monitor.Model.MessageFilter)">
            <summary>
            Gets the messages.
            </summary>
            <param name="filter">The filter.</param>
            <returns></returns>
            <exception cref="T:System.ArgumentNullException">
            filter - Filter cannot be null
            or
            Direction - Direction filter cannot be empty
            </exception>
            <exception cref="T:Eu.EDelivery.AS4.Fe.BusinessException">No messages found</exception>
        </member>
        <member name="M:Eu.EDelivery.AS4.Fe.Monitor.IMonitorService.GetRelatedMessages(Eu.EDelivery.AS4.Fe.Monitor.Model.Direction,System.String)">
            <summary>
            Gets the related messages.
            </summary>
            <param name="direction">The direction.</param>
            <param name="messageId">The message identifier.</param>
            <returns></returns>
        </member>
        <member name="M:Eu.EDelivery.AS4.Fe.Monitor.IMonitorService.GetPmodeNumber(System.String)">
            <summary>
            Gets the pmode number.
            </summary>
            <param name="pmode">The pmode.</param>
            <returns></returns>
        </member>
        <member name="M:Eu.EDelivery.AS4.Fe.Monitor.IMonitorService.DownloadMessageBody(Eu.EDelivery.AS4.Fe.Monitor.Model.Direction,System.String)">
            <summary>
            Downloads the message body.
            </summary>
            <param name="direction">The direction.</param>
            <param name="messageId">The message identifier.</param>
            <returns></returns>
            <exception cref="T:System.ArgumentNullException">messageId - messageId parameter cannot be null</exception>
            <exception cref="T:System.ComponentModel.InvalidEnumArgumentException">direction</exception>
        </member>
        <member name="M:Eu.EDelivery.AS4.Fe.Monitor.IMonitorService.DownloadExceptionMessageBody(Eu.EDelivery.AS4.Fe.Monitor.Model.Direction,System.Int64)">
            <summary>
            Downloads the exception body.
            </summary>
            <param name="direction">The direction.</param>
            <param name="id"></param>
            <returns></returns>
            <exception cref="T:System.ArgumentNullException">messageId - messageId parameter cannot be null</exception>
        </member>
        <member name="M:Eu.EDelivery.AS4.Fe.Monitor.IMonitorService.GetExceptionDetail(Eu.EDelivery.AS4.Fe.Monitor.Model.Direction,System.Int64)">
            <summary>
            Gets the exception detail.
            </summary>
            <param name="direction">The direction.</param>
            <param name="messageId">The message identifier.</param>
            <returns></returns>
        </member>
        <member name="T:Eu.EDelivery.AS4.Fe.Monitor.LogType">
            <summary>
            Identify different types of log messages
            </summary>
        </member>
        <member name="F:Eu.EDelivery.AS4.Fe.Monitor.LogType.Info">
            <summary>
            Contains information
            </summary>
        </member>
        <member name="F:Eu.EDelivery.AS4.Fe.Monitor.LogType.Error">
            <summary>
            Contains an error message
            </summary>
        </member>
        <member name="F:Eu.EDelivery.AS4.Fe.Monitor.LogType.Upload">
            <summary>
            Uploading a file
            </summary>
        </member>
        <member name="F:Eu.EDelivery.AS4.Fe.Monitor.LogType.Done">
            <summary>
            Indicate that the submit tool is finished
            </summary>
        </member>
        <member name="F:Eu.EDelivery.AS4.Fe.Monitor.LogType.Pmode">
            <summary>
            It contains a PMode
            </summary>
        </member>
        <member name="F:Eu.EDelivery.AS4.Fe.Monitor.LogType.Message">
            <summary>
            It is an AS4 message
            </summary>
        </member>
        <member name="T:Eu.EDelivery.AS4.Fe.Monitor.Model.ExceptionFilter">
            <summary>
            Filter object for exception messages
            </summary>
            <seealso>
                <cref>
                    Eu.EDelivery.AS4.Fe.Monitor.Model.BaseFilter{Eu.EDelivery.AS4.Entities.ExceptionEntity,
                    Eu.EDelivery.AS4.Fe.Monitor.Model.ExceptionMessage}
                </cref>
            </seealso>
        </member>
        <member name="P:Eu.EDelivery.AS4.Fe.Monitor.Model.ExceptionFilter.Direction">
            <summary>
            Gets or sets the direction.
            </summary>
            <value>
            The direction.
            </value>
        </member>
        <member name="P:Eu.EDelivery.AS4.Fe.Monitor.Model.ExceptionFilter.EbmsRefToMessageId">
            <summary>
            Gets or sets the ebms reference to message identifier.
            </summary>
            <value>
            The ebms reference to message identifier.
            </value>
        </member>
        <member name="P:Eu.EDelivery.AS4.Fe.Monitor.Model.ExceptionFilter.ModificationTimeFrom">
            <summary>
            Gets or sets the modification time from.
            </summary>
            <value>
            The modification time from.
            </value>
        </member>
        <member name="P:Eu.EDelivery.AS4.Fe.Monitor.Model.ExceptionFilter.ModificationTimeTo">
            <summary>
            Gets or sets the modification time to.
            </summary>
            <value>
            The modification time to.
            </value>
        </member>
        <member name="P:Eu.EDelivery.AS4.Fe.Monitor.Model.ExceptionFilter.Operation">
            <summary>
            Gets or sets the operation.
            </summary>
            <value>
            The operation.
            </value>
        </member>
        <member name="M:Eu.EDelivery.AS4.Fe.Monitor.Model.ExceptionFilter.ApplyFilter``1(System.Linq.IQueryable{``0})">
            <summary>
            Applies the filter.
            </summary>
            <param name="query">The query.</param>
            <returns></returns>
        </member>
        <member name="T:Eu.EDelivery.AS4.Fe.Monitor.Model.ExceptionMessage">
            <summary>
            Class to contain exception messages
            </summary>
        </member>
        <member name="P:Eu.EDelivery.AS4.Fe.Monitor.Model.ExceptionMessage.Id">
            <summary>
            Gets or sets the identifier.
            </summary>
            <value>
            The identifier.
            </value>
        </member>
        <member name="P:Eu.EDelivery.AS4.Fe.Monitor.Model.ExceptionMessage.Direction">
            <summary>
            Gets or sets the direction.
            </summary>
            <value>
            The direction.
            </value>
        </member>
        <member name="P:Eu.EDelivery.AS4.Fe.Monitor.Model.ExceptionMessage.EbmsRefToMessageId">
            <summary>
            Gets or sets the ebms reference to message identifier.
            </summary>
            <value>
            The ebms reference to message identifier.
            </value>
        </member>
        <member name="P:Eu.EDelivery.AS4.Fe.Monitor.Model.ExceptionMessage.Exception">
            <summary>
            Gets or sets the exception.
            </summary>
            <value>
            The exception.
            </value>
        </member>
        <member name="P:Eu.EDelivery.AS4.Fe.Monitor.Model.ExceptionMessage.ExceptionShort">
            <summary>
            Gets or sets the exception short.
            </summary>
            <value>
            The exception short.
            </value>
        </member>
        <member name="P:Eu.EDelivery.AS4.Fe.Monitor.Model.ExceptionMessage.PMode">
            <summary>
            Gets or sets the p mode.
            </summary>
            <value>
            The p mode.
            </value>
        </member>
        <member name="P:Eu.EDelivery.AS4.Fe.Monitor.Model.ExceptionMessage.ModificationTime">
            <summary>
            Gets or sets the modification time.
            </summary>
            <value>
            The modification time.
            </value>
        </member>
        <member name="P:Eu.EDelivery.AS4.Fe.Monitor.Model.ExceptionMessage.InsertionTime">
            <summary>
            Gets or sets the insertion time.
            </summary>
            <value>
            The insertion time.
            </value>
        </member>
        <member name="P:Eu.EDelivery.AS4.Fe.Monitor.Model.ExceptionMessage.Operation">
            <summary>
            Gets or sets the operation.
            </summary>
            <value>
            The operation.
            </value>
        </member>
        <member name="P:Eu.EDelivery.AS4.Fe.Monitor.Model.ExceptionMessage.Hash">
            <summary>
            Gets or sets the hash.
            </summary>
            <value>
            The hash.
            </value>
        </member>
        <member name="P:Eu.EDelivery.AS4.Fe.Monitor.Model.ExceptionMessage.HasMessageBody">
            <summary>
            Gets or sets a value indicating whether this instance has a message body.
            </summary>
            <value>
              <c>true</c> if this instance has a message body; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="T:Eu.EDelivery.AS4.Fe.Monitor.Model.Message">
            <summary>
            Class to hold message data
            </summary>
        </member>
        <member name="P:Eu.EDelivery.AS4.Fe.Monitor.Model.Message.Id">
            <summary>
            Gets or sets the identifier.
            </summary>
            <value>
            The identifier.
            </value>
        </member>
        <member name="P:Eu.EDelivery.AS4.Fe.Monitor.Model.Message.Operation">
            <summary>
            Gets or sets the operation.
            </summary>
            <value>
            The operation.
            </value>
        </member>
        <member name="P:Eu.EDelivery.AS4.Fe.Monitor.Model.Message.OperationMethod">
            <summary>
            Gets or sets the operation method.
            </summary>
            <value>
            The operation method.
            </value>
        </member>
        <member name="P:Eu.EDelivery.AS4.Fe.Monitor.Model.Message.EbmsMessageId">
            <summary>
            Gets or sets the ebms message identifier.
            </summary>
            <value>
            The ebms message identifier.
            </value>
        </member>
        <member name="P:Eu.EDelivery.AS4.Fe.Monitor.Model.Message.EbmsMessageType">
            <summary>
            Gets or sets the type of the ebms message.
            </summary>
            <value>
            The type of the ebms message.
            </value>
        </member>
        <member name="P:Eu.EDelivery.AS4.Fe.Monitor.Model.Message.EbmsRefToMessageId">
            <summary>
            Gets or sets the ebms reference to message identifier.
            </summary>
            <value>
            The ebms reference to message identifier.
            </value>
        </member>
        <member name="P:Eu.EDelivery.AS4.Fe.Monitor.Model.Message.ModificationTime">
            <summary>
            Gets or sets the modification time.
            </summary>
            <value>
            The modification time.
            </value>
        </member>
        <member name="P:Eu.EDelivery.AS4.Fe.Monitor.Model.Message.InsertionTime">
            <summary>
            Gets or sets the insertion time.
            </summary>
            <value>
            The insertion time.
            </value>
        </member>
        <member name="P:Eu.EDelivery.AS4.Fe.Monitor.Model.Message.ExceptionType">
            <summary>
            Gets or sets the type of the exception.
            </summary>
            <value>
            The type of the exception.
            </value>
        </member>
        <member name="P:Eu.EDelivery.AS4.Fe.Monitor.Model.Message.Status">
            <summary>
            Gets or sets the status.
            </summary>
            <value>
            The status.
            </value>
        </member>
        <member name="P:Eu.EDelivery.AS4.Fe.Monitor.Model.Message.FromParty">
            <summary>
            Gets or sets from party.
            </summary>
            <value>
            From party.
            </value>
        </member>
        <member name="P:Eu.EDelivery.AS4.Fe.Monitor.Model.Message.ToParty">
            <summary>
            Gets or sets to party.
            </summary>
            <value>
            To party.
            </value>
        </member>
        <member name="P:Eu.EDelivery.AS4.Fe.Monitor.Model.Message.Action">
            <summary>
            Gets or sets the action.
            </summary>
            <value>
            The action.
            </value>
        </member>
        <member name="P:Eu.EDelivery.AS4.Fe.Monitor.Model.Message.Mpc">
            <summary>
            Gets or sets the MPC.
            </summary>
            <value>
            The MPC.
            </value>
        </member>
        <member name="P:Eu.EDelivery.AS4.Fe.Monitor.Model.Message.Direction">
            <summary>
            Gets or sets the direction.
            </summary>
            <value>
            The direction.
            </value>
        </member>
        <member name="P:Eu.EDelivery.AS4.Fe.Monitor.Model.Message.IsDuplicate">
            <summary>
            Gets or sets a value indicating whether this instance is duplicate.
            </summary>
            <value>
              <c>true</c> if this instance is duplicate; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="P:Eu.EDelivery.AS4.Fe.Monitor.Model.Message.IsTest">
            <summary>
            Gets or sets a value indicating whether this instance is test.
            </summary>
            <value>
              <c>true</c> if this instance is test; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="P:Eu.EDelivery.AS4.Fe.Monitor.Model.Message.Mep">
            <summary>
            Gets or sets the mep.
            </summary>
            <value>
            The mep.
            </value>
        </member>
        <member name="P:Eu.EDelivery.AS4.Fe.Monitor.Model.Message.Service">
            <summary>
            Gets or sets the service.
            </summary>
            <value>
            The service.
            </value>
        </member>
        <member name="P:Eu.EDelivery.AS4.Fe.Monitor.Model.Message.PMode">
            <summary>
            Gets or sets the p mode.
            </summary>
            <value>
            The p mode.
            </value>
        </member>
        <member name="P:Eu.EDelivery.AS4.Fe.Monitor.Model.Message.PModeId">
            <summary>
            Gets or sets the pmode identifier.
            </summary>
            <value>
            The pmode identifier.
            </value>
        </member>
        <member name="P:Eu.EDelivery.AS4.Fe.Monitor.Model.Message.HasExceptions">
            <summary>
            Gets or sets a value indicating whether this instance has exceptions.
            </summary>
            <value>
              <c>true</c> if this instance has exceptions; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="P:Eu.EDelivery.AS4.Fe.Monitor.Model.Message.Hash">
            <summary>
            Gets or sets the hash.
            </summary>
            <value>
            The hash.
            </value>
        </member>
        <member name="T:Eu.EDelivery.AS4.Fe.Monitor.Model.MonitorController">
            <summary>
            Monitor controller
            </summary>
            <seealso cref="T:Microsoft.AspNetCore.Mvc.Controller" />
        </member>
        <member name="M:Eu.EDelivery.AS4.Fe.Monitor.Model.MonitorController.#ctor(Eu.EDelivery.AS4.Fe.Monitor.IMonitorService)">
            <summary>
            Initializes a new instance of the <see cref="T:Eu.EDelivery.AS4.Fe.Monitor.Model.MonitorController"/> class.
            </summary>
            <param name="monitorService">The monitor service.</param>
        </member>
        <member name="M:Eu.EDelivery.AS4.Fe.Monitor.Model.MonitorController.GetInExceptions(Eu.EDelivery.AS4.Fe.Monitor.Model.ExceptionFilter)">
            <summary>
            Gets the in exceptions.
            </summary>
            <param name="filter">The filter.</param>
            <returns>ExceptionMessage</returns>
        </member>
        <member name="M:Eu.EDelivery.AS4.Fe.Monitor.Model.MonitorController.GetMessages(Eu.EDelivery.AS4.Fe.Monitor.Model.MessageFilter)">
            <summary>
            Gets the messages.
            </summary>
            <param name="filter">The filter.</param>
            <returns></returns>
        </member>
        <member name="M:Eu.EDelivery.AS4.Fe.Monitor.Model.MonitorController.GetRelatedMessages(Eu.EDelivery.AS4.Fe.Monitor.Model.Direction,System.String)">
            <summary>
            Gets the related messages.
            </summary>
            <param name="direction">The direction.</param>
            <param name="messageId">The message identifier.</param>
            <returns></returns>
        </member>
        <member name="M:Eu.EDelivery.AS4.Fe.Monitor.Model.MonitorController.GetMessageBody(Eu.EDelivery.AS4.Fe.Monitor.Model.Direction,System.String)">
            <summary>
            Gets the message body.
            </summary>
            <param name="direction">The direction.</param>
            <param name="messageId">The message identifier.</param>
            <returns></returns>
        </member>
        <member name="M:Eu.EDelivery.AS4.Fe.Monitor.Model.MonitorController.GetExceptionBody(Eu.EDelivery.AS4.Fe.Monitor.Model.Direction,System.Int64)">
            <summary>
            Gets the exception body.
            </summary>
            <param name="direction">The direction.</param>
            <param name="messageId">The message identifier.</param>
            <returns></returns>
        </member>
        <member name="T:Eu.EDelivery.AS4.Fe.Monitor.MonitorAutoMapper">
            <summary>
            Setup automapper for the monitor
            </summary>
            <seealso cref="T:AutoMapper.Profile" />
        </member>
        <member name="M:Eu.EDelivery.AS4.Fe.Monitor.MonitorAutoMapper.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Eu.EDelivery.AS4.Fe.Monitor.MonitorAutoMapper"/> class.
            </summary>
        </member>
        <member name="T:Eu.EDelivery.AS4.Fe.Monitor.MonitorService">
            <summary>
            Service to view messages
            </summary>
            <seealso cref="T:Eu.EDelivery.AS4.Fe.Monitor.IMonitorService" />
        </member>
        <member name="M:Eu.EDelivery.AS4.Fe.Monitor.MonitorService.#ctor(Eu.EDelivery.AS4.Common.DatastoreContext,Eu.EDelivery.AS4.Fe.Pmodes.IAs4PmodeSource,Eu.EDelivery.AS4.Repositories.IDatastoreRepository,AutoMapper.MapperConfiguration)">
            <summary>
            Initializes a new instance of the <see cref="T:Eu.EDelivery.AS4.Fe.Monitor.MonitorService" /> class.
            </summary>
            <param name="context">The context.</param>
            <param name="pmodeSource">The pmode source.</param>
            <param name="datastoreRepository">The datastore repository.</param>
            <param name="mapperConfig">The mapper configuration.</param>
        </member>
        <member name="M:Eu.EDelivery.AS4.Fe.Monitor.MonitorService.GetExceptions(Eu.EDelivery.AS4.Fe.Monitor.Model.ExceptionFilter)">
            <summary>
            Gets the exceptions.
            </summary>
            <param name="filter">Exception filter object</param>
            <returns></returns>
            <exception cref="T:System.ArgumentNullException">filter - Filter must be supplied
            or
            Direction - Direction cannot be null</exception>
            <exception cref="T:Eu.EDelivery.AS4.Fe.BusinessException">Could not get any exceptions, something went wrong.</exception>
        </member>
        <member name="M:Eu.EDelivery.AS4.Fe.Monitor.MonitorService.GetMessages(Eu.EDelivery.AS4.Fe.Monitor.Model.MessageFilter)">
            <summary>
            Gets the messages.
            </summary>
            <param name="filter">The filter.</param>
            <returns></returns>
            <exception cref="T:System.ArgumentNullException">
            filter - Filter cannot be null
            or
            Direction - Direction filter cannot be empty
            </exception>
            <exception cref="T:Eu.EDelivery.AS4.Fe.BusinessException">No messages found</exception>
        </member>
        <member name="M:Eu.EDelivery.AS4.Fe.Monitor.MonitorService.GetRelatedMessages(Eu.EDelivery.AS4.Fe.Monitor.Model.Direction,System.String)">
            <summary>
            Gets the related messages.
            </summary>
            <param name="direction">The direction.</param>
            <param name="messageId">The message identifier.</param>
            <returns></returns>
        </member>
        <member name="M:Eu.EDelivery.AS4.Fe.Monitor.MonitorService.GetPmodeNumber(System.String)">
            <summary>
            Gets the pmode number.
            </summary>
            <param name="pmode">The pmode.</param>
            <returns></returns>
        </member>
        <member name="M:Eu.EDelivery.AS4.Fe.Monitor.MonitorService.DownloadMessageBody(Eu.EDelivery.AS4.Fe.Monitor.Model.Direction,System.String)">
            <summary>
            Downloads the message body.
            </summary>
            <param name="direction">The direction.</param>
            <param name="messageId">The message identifier.</param>
            <returns></returns>
            <exception cref="T:System.ArgumentNullException">messageId - messageId parameter cannot be null</exception>
            <exception cref="T:System.ComponentModel.InvalidEnumArgumentException">direction</exception>
        </member>
        <member name="M:Eu.EDelivery.AS4.Fe.Monitor.MonitorService.DownloadExceptionMessageBody(Eu.EDelivery.AS4.Fe.Monitor.Model.Direction,System.Int64)">
            <summary>
            Downloads the exception body.
            </summary>
            <param name="direction">The direction.</param>
            <param name="id"></param>
            <returns>The exception</returns>
            <exception cref="T:System.ArgumentNullException">messageId - messageId parameter cannot be null</exception>
        </member>
        <member name="M:Eu.EDelivery.AS4.Fe.Monitor.MonitorService.GetExceptionDetail(Eu.EDelivery.AS4.Fe.Monitor.Model.Direction,System.Int64)">
            <summary>
            Gets the exception detail.
            </summary>
            <param name="direction">The direction.</param>
            <param name="messageId">The message identifier.</param>
            <returns></returns>
        </member>
        <member name="T:Eu.EDelivery.AS4.Fe.Monitor.MonitorSetup">
            <summary>
            Setup monitor
            </summary>
            <seealso cref="T:Eu.EDelivery.AS4.Fe.Monitor.IMonitorSetup" />
        </member>
        <member name="M:Eu.EDelivery.AS4.Fe.Monitor.MonitorSetup.Run(Microsoft.Extensions.DependencyInjection.IServiceCollection,Microsoft.Extensions.Configuration.IConfigurationRoot)">
            <summary>
            Runs the specified services.
            </summary>
            <param name="services">The services.</param>
            <param name="configuration">The configuration.</param>
        </member>
        <member name="M:Eu.EDelivery.AS4.Fe.Monitor.MonitorSetup.Run(Microsoft.Extensions.Configuration.IConfigurationBuilder,Microsoft.Extensions.DependencyInjection.IServiceCollection,Microsoft.Extensions.Configuration.IConfigurationRoot)">
            <summary>
            Runs the specified configuration builder.
            </summary>
            <param name="configBuilder">The configuration builder.</param>
            <param name="services">The services.</param>
            <param name="localConfig">The local configuration.</param>
        </member>
        <member name="T:Eu.EDelivery.AS4.Fe.Monitor.SignalRContractResolver">
            <summary>
            Contract resolver to support camel casing in SignalR
            </summary>
            <seealso cref="T:Newtonsoft.Json.Serialization.IContractResolver" />
        </member>
        <member name="M:Eu.EDelivery.AS4.Fe.Monitor.SignalRContractResolver.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Eu.EDelivery.AS4.Fe.Monitor.SignalRContractResolver"/> class.
            </summary>
        </member>
        <member name="M:Eu.EDelivery.AS4.Fe.Monitor.SignalRContractResolver.ResolveContract(System.Type)">
            <summary>
            Resolves the contract for a given type.
            </summary>
            <param name="type">The type to resolve a contract for.</param>
            <returns>
            The contract for a given type.
            </returns>
        </member>
        <member name="T:Eu.EDelivery.AS4.Fe.Monitor.SubmitToolMessageHub">
            <summary>
            SignalR messagehub used for communicating with the submit tool client(s)
            </summary>
            <seealso cref="T:Microsoft.AspNet.SignalR.Hub" />
        </member>
        <member name="T:Eu.EDelivery.AS4.Fe.NotFoundException">
            <summary>
            Type of business exception thrown to indicate that an entity could not be found
            </summary>
            <seealso cref="T:Eu.EDelivery.AS4.Fe.BusinessException" />
        </member>
        <member name="M:Eu.EDelivery.AS4.Fe.NotFoundException.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Eu.EDelivery.AS4.Fe.NotFoundException"/> class.
            </summary>
            <param name="message">The message that describes the error.</param>
        </member>
        <member name="T:Eu.EDelivery.AS4.Fe.Pmodes.As4PmodeSource">
            <summary>
            As4 PMode source
            </summary>
            <seealso cref="T:Eu.EDelivery.AS4.Fe.Pmodes.IAs4PmodeSource" />
        </member>
        <member name="M:Eu.EDelivery.AS4.Fe.Pmodes.As4PmodeSource.#ctor(Microsoft.Extensions.Options.IOptionsSnapshot{Eu.EDelivery.AS4.Fe.Pmodes.PmodeSettings})">
            <summary>
            Initializes a new instance of the <see cref="T:Eu.EDelivery.AS4.Fe.Pmodes.As4PmodeSource"/> class.
            </summary>
            <param name="settings">The settings.</param>
        </member>
        <member name="M:Eu.EDelivery.AS4.Fe.Pmodes.As4PmodeSource.GetReceivingNames">
            <summary>
            Gets the receiving names.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Eu.EDelivery.AS4.Fe.Pmodes.As4PmodeSource.GetReceivingByName(System.String)">
            <summary>
            Gets the name of the receiving by.
            </summary>
            <param name="name">The name.</param>
            <returns></returns>
        </member>
        <member name="M:Eu.EDelivery.AS4.Fe.Pmodes.As4PmodeSource.GetSendingNames">
            <summary>
            Gets the sending names.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Eu.EDelivery.AS4.Fe.Pmodes.As4PmodeSource.GetSendingByName(System.String)">
            <summary>
            Gets the name of the sending by.
            </summary>
            <param name="name">The name.</param>
            <returns></returns>
        </member>
        <member name="M:Eu.EDelivery.AS4.Fe.Pmodes.As4PmodeSource.CreateReceiving(Eu.EDelivery.AS4.Fe.Pmodes.Model.ReceivingBasePmode)">
            <summary>
            Creates the receiving.
            </summary>
            <param name="basePmode">The base pmode.</param>
            <returns></returns>
        </member>
        <member name="M:Eu.EDelivery.AS4.Fe.Pmodes.As4PmodeSource.DeleteReceiving(System.String)">
            <summary>
            Deletes the receiving.
            </summary>
            <param name="name">The name.</param>
            <returns></returns>
        </member>
        <member name="M:Eu.EDelivery.AS4.Fe.Pmodes.As4PmodeSource.DeleteSending(System.String)">
            <summary>
            Deletes the sending.
            </summary>
            <param name="name">The name.</param>
            <returns></returns>
        </member>
        <member name="M:Eu.EDelivery.AS4.Fe.Pmodes.As4PmodeSource.CreateSending(Eu.EDelivery.AS4.Fe.Pmodes.Model.SendingBasePmode)">
            <summary>
            Creates the sending.
            </summary>
            <param name="basePmode">The base pmode.</param>
            <returns></returns>
        </member>
        <member name="M:Eu.EDelivery.AS4.Fe.Pmodes.As4PmodeSource.GetPmodeNumber(System.String)">
            <summary>
            Gets the pmode number.
            </summary>
            <param name="pmodeString">The pmode string.</param>
            <returns></returns>
        </member>
        <member name="M:Eu.EDelivery.AS4.Fe.Pmodes.As4PmodeSource.UpdateSending(Eu.EDelivery.AS4.Fe.Pmodes.Model.SendingBasePmode,System.String)">
            <summary>
            Updates the sending.
            </summary>
            <param name="basePmode">The base pmode.</param>
            <param name="originalName">Name of the original.</param>
            <returns></returns>
        </member>
        <member name="M:Eu.EDelivery.AS4.Fe.Pmodes.As4PmodeSource.UpdateReceiving(Eu.EDelivery.AS4.Fe.Pmodes.Model.ReceivingBasePmode,System.String)">
            <summary>
            Updates the receiving.
            </summary>
            <param name="basePmode">The base pmode.</param>
            <param name="originalName">Name of the original.</param>
            <returns></returns>
        </member>
        <member name="T:Eu.EDelivery.AS4.Fe.Pmodes.IAs4PmodeSource">
            <summary>
            As4 PMode source
            </summary>
            <seealso cref="T:Eu.EDelivery.AS4.Fe.Modules.IModular" />
        </member>
        <member name="M:Eu.EDelivery.AS4.Fe.Pmodes.IAs4PmodeSource.GetReceivingNames">
            <summary>
            Gets the receiving names.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Eu.EDelivery.AS4.Fe.Pmodes.IAs4PmodeSource.GetReceivingByName(System.String)">
            <summary>
            Gets the name of the receiving by.
            </summary>
            <param name="name">The name.</param>
            <returns></returns>
        </member>
        <member name="M:Eu.EDelivery.AS4.Fe.Pmodes.IAs4PmodeSource.GetSendingNames">
            <summary>
            Gets the sending names.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Eu.EDelivery.AS4.Fe.Pmodes.IAs4PmodeSource.GetSendingByName(System.String)">
            <summary>
            Gets the name of the sending by.
            </summary>
            <param name="name">The name.</param>
            <returns></returns>
        </member>
        <member name="M:Eu.EDelivery.AS4.Fe.Pmodes.IAs4PmodeSource.CreateReceiving(Eu.EDelivery.AS4.Fe.Pmodes.Model.ReceivingBasePmode)">
            <summary>
            Creates the receiving.
            </summary>
            <param name="basePmode">The base pmode.</param>
            <returns></returns>
        </member>
        <member name="M:Eu.EDelivery.AS4.Fe.Pmodes.IAs4PmodeSource.DeleteReceiving(System.String)">
            <summary>
            Deletes the receiving.
            </summary>
            <param name="name">The name.</param>
            <returns></returns>
        </member>
        <member name="M:Eu.EDelivery.AS4.Fe.Pmodes.IAs4PmodeSource.DeleteSending(System.String)">
            <summary>
            Deletes the sending.
            </summary>
            <param name="name">The name.</param>
            <returns></returns>
        </member>
        <member name="M:Eu.EDelivery.AS4.Fe.Pmodes.IAs4PmodeSource.CreateSending(Eu.EDelivery.AS4.Fe.Pmodes.Model.SendingBasePmode)">
            <summary>
            Creates the sending.
            </summary>
            <param name="basePmode">The base pmode.</param>
            <returns></returns>
        </member>
        <member name="M:Eu.EDelivery.AS4.Fe.Pmodes.IAs4PmodeSource.UpdateSending(Eu.EDelivery.AS4.Fe.Pmodes.Model.SendingBasePmode,System.String)">
            <summary>
            Updates the sending.
            </summary>
            <param name="basePmode">The base pmode.</param>
            <param name="originalName">Name of the original.</param>
            <returns></returns>
        </member>
        <member name="M:Eu.EDelivery.AS4.Fe.Pmodes.IAs4PmodeSource.UpdateReceiving(Eu.EDelivery.AS4.Fe.Pmodes.Model.ReceivingBasePmode,System.String)">
            <summary>
            Updates the receiving.
            </summary>
            <param name="basePmode">The base pmode.</param>
            <param name="originalName">Name of the original.</param>
            <returns></returns>
        </member>
        <member name="M:Eu.EDelivery.AS4.Fe.Pmodes.IAs4PmodeSource.GetPmodeNumber(System.String)">
            <summary>
            Gets the pmode number.
            </summary>
            <param name="pmodeString">The pmode string.</param>
            <returns></returns>
        </member>
        <member name="T:Eu.EDelivery.AS4.Fe.Pmodes.IPmodeService">
            <summary>
            Interface to implement a pmode service
            </summary>
            <seealso cref="T:Eu.EDelivery.AS4.Fe.Modules.IModular" />
        </member>
        <member name="M:Eu.EDelivery.AS4.Fe.Pmodes.IPmodeService.GetReceivingNames">
            <summary>
            Gets the receiving names.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Eu.EDelivery.AS4.Fe.Pmodes.IPmodeService.GetReceivingByName(System.String)">
            <summary>
            Get a list of receiving pmodes
            </summary>
            <param name="name">The name of the pmode.</param>
            <returns></returns>
        </member>
        <member name="M:Eu.EDelivery.AS4.Fe.Pmodes.IPmodeService.GetSendingNames">
            <summary>
            Get a list of sending pmodes
            </summary>
            <returns></returns>
        </member>
        <member name="M:Eu.EDelivery.AS4.Fe.Pmodes.IPmodeService.GetSendingByName(System.String)">
            <summary>
            Get a sending pmode by name
            </summary>
            <param name="name">The name of the pmode.</param>
            <returns></returns>
        </member>
        <member name="M:Eu.EDelivery.AS4.Fe.Pmodes.IPmodeService.CreateReceiving(Eu.EDelivery.AS4.Fe.Pmodes.Model.ReceivingBasePmode)">
            <summary>
            Create a receiving pmode
            </summary>
            <param name="basePmode">The pmode to create</param>
            <returns></returns>
            <exception cref="T:Eu.EDelivery.AS4.Fe.AlreadyExistsException">Exception thrown when a pmode with the supplied name already exists</exception>
        </member>
        <member name="M:Eu.EDelivery.AS4.Fe.Pmodes.IPmodeService.CreateSending(Eu.EDelivery.AS4.Fe.Pmodes.Model.SendingBasePmode)">
            <summary>
            Create sending pmode
            </summary>
            <param name="basePmode">The pmode to create.</param>
            <returns></returns>
            <exception cref="T:Eu.EDelivery.AS4.Fe.AlreadyExistsException">Exception thrown when a pmode with the supplied name already exists</exception>
        </member>
        <member name="M:Eu.EDelivery.AS4.Fe.Pmodes.IPmodeService.DeleteReceiving(System.String)">
            <summary>
            Delete a receiving pmode
            </summary>
            <param name="name">The name of the pmode to delete.</param>
            <returns></returns>
            <exception cref="T:Eu.EDelivery.AS4.Fe.NotFoundException">Exception thrown when the pmode doesn't exist</exception>
        </member>
        <member name="M:Eu.EDelivery.AS4.Fe.Pmodes.IPmodeService.DeleteSending(System.String)">
            <summary>
            Delete a sending pmode
            </summary>
            <param name="name">The name.</param>
            <returns></returns>
            <exception cref="T:Eu.EDelivery.AS4.Fe.NotFoundException">Exception thrown when the pmode doesn't exist</exception>
        </member>
        <member name="M:Eu.EDelivery.AS4.Fe.Pmodes.IPmodeService.UpdateSending(Eu.EDelivery.AS4.Fe.Pmodes.Model.SendingBasePmode,System.String)">
            <summary>
            Update sending pmode
            </summary>
            <param name="basePmode">Date to update the sending pmode with</param>
            <param name="originalName">Name of the original.</param>
            <returns></returns>
            <exception cref="T:Eu.EDelivery.AS4.Fe.AlreadyExistsException">Exception thrown when a sending pmode with the supplied name already exists</exception>
        </member>
        <member name="M:Eu.EDelivery.AS4.Fe.Pmodes.IPmodeService.UpdateReceiving(Eu.EDelivery.AS4.Fe.Pmodes.Model.ReceivingBasePmode,System.String)">
            <summary>
            Update receiving pmode
            </summary>
            <param name="basePmode">The base pmode.</param>
            <param name="originalName">Name of the original.</param>
            <returns></returns>
            <exception cref="T:Eu.EDelivery.AS4.Fe.AlreadyExistsException">Exception thrown when a pmode with the supplied name already exists.</exception>
        </member>
        <member name="T:Eu.EDelivery.AS4.Fe.Pmodes.Model.SendingBasePmode">
            <summary>
            Class to hold a sending pmode
            </summary>
            <seealso cref="!:Eu.EDelivery.AS4.Fe.Pmodes.Model.BasePmode&lt;Eu.EDelivery.AS4.Model.PMode.SendingProcessingMode&gt;" />
        </member>
        <member name="P:Eu.EDelivery.AS4.Fe.Pmodes.Model.SendingBasePmode.Pmode">
            <summary>
            Gets or sets the pmode.
            </summary>
            <value>
            The pmode.
            </value>
        </member>
        <member name="P:Eu.EDelivery.AS4.Fe.Pmodes.Model.SendingBasePmode.IsDynamicDiscoveryEnabled">
            <summary>
            Gets or sets a value indicating whether push configuration is enabled.
            Setting this to false will result in the PushConfiguration node being removed from the xml.
            </summary>
            <value>
              <c>true</c> if this instance is push configuration enabled; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="T:Eu.EDelivery.AS4.Fe.Pmodes.PmodeController">
            <summary>
            Controller to manage pmodes
            </summary>
            <seealso cref="T:Microsoft.AspNetCore.Mvc.Controller" />
        </member>
        <member name="M:Eu.EDelivery.AS4.Fe.Pmodes.PmodeController.#ctor(Eu.EDelivery.AS4.Fe.Pmodes.IPmodeService)">
            <summary>
            Initializes a new instance of the <see cref="T:Eu.EDelivery.AS4.Fe.Pmodes.PmodeController"/> class.
            </summary>
            <param name="pmodeService">The pmode service.</param>
        </member>
        <member name="M:Eu.EDelivery.AS4.Fe.Pmodes.PmodeController.GetReceivingPmodes">
            <summary>
            Get a list of receiving pmode names.
            </summary>
            <returns>String list with all the pmode names.</returns>
        </member>
        <member name="M:Eu.EDelivery.AS4.Fe.Pmodes.PmodeController.CreateReceiving(Eu.EDelivery.AS4.Fe.Pmodes.Model.ReceivingBasePmode)">
            <summary>
            Create a receiving pmode
            </summary>
            <param name="basePmode">Pmode data</param>
            <returns></returns>
        </member>
        <member name="M:Eu.EDelivery.AS4.Fe.Pmodes.PmodeController.UpdateReceiving(Eu.EDelivery.AS4.Fe.Pmodes.Model.ReceivingBasePmode,System.String)">
            <summary>
            Update existing receiving pmode
            </summary>
            <param name="basePmode">The base pmode.</param>
            <param name="originalName">Name of the original.</param>
            <returns></returns>
        </member>
        <member name="M:Eu.EDelivery.AS4.Fe.Pmodes.PmodeController.GetReceiving(System.String)">
            <summary>
            Get a receiving pmode by name
            </summary>
            <param name="name">The name of the receiving pmode</param>
            <returns></returns>
        </member>
        <member name="M:Eu.EDelivery.AS4.Fe.Pmodes.PmodeController.DeleteReceiving(System.String)">
            <summary>
            Delete an existing receiving pmode.
            </summary>
            <param name="name">The name of the pmode.</param>
            <returns></returns>
        </member>
        <member name="M:Eu.EDelivery.AS4.Fe.Pmodes.PmodeController.GetSendingPmodes">
            <summary>
            Get a list of sending pmode names
            </summary>
            <returns>String list of names</returns>
        </member>
        <member name="M:Eu.EDelivery.AS4.Fe.Pmodes.PmodeController.CreateSending(Eu.EDelivery.AS4.Fe.Pmodes.Model.SendingBasePmode)">
            <summary>
            Create a sending pmode.
            </summary>
            <param name="basePmode">The pmode.</param>
            <returns></returns>
        </member>
        <member name="M:Eu.EDelivery.AS4.Fe.Pmodes.PmodeController.GetSending(System.String)">
            <summary>
            Get a sending pmode by name.
            </summary>
            <param name="name">The name of the pmode.</param>
            <returns></returns>
        </member>
        <member name="M:Eu.EDelivery.AS4.Fe.Pmodes.PmodeController.DeleteSending(System.String)">
            <summary>
            Delete an existing sending pmode.
            </summary>
            <param name="name">The name of the pmode.</param>
            <returns></returns>
        </member>
        <member name="M:Eu.EDelivery.AS4.Fe.Pmodes.PmodeController.UpdateSending(Eu.EDelivery.AS4.Fe.Pmodes.Model.SendingBasePmode,System.String)">
            <summary>
            Update an existing pmode.
            </summary>
            <param name="basePmode">The pmode data.</param>
            <param name="originalPmodeName">Name of the original pmode.</param>
            <returns></returns>
        </member>
        <member name="T:Eu.EDelivery.AS4.Fe.Pmodes.PmodeService">
            <summary>
                Manage pmodes
            </summary>
            <seealso cref="T:Eu.EDelivery.AS4.Fe.Pmodes.IPmodeService" />
        </member>
        <member name="M:Eu.EDelivery.AS4.Fe.Pmodes.PmodeService.#ctor(Eu.EDelivery.AS4.Fe.Pmodes.IAs4PmodeSource,System.Boolean)">
            <summary>
            Initializes a new instance of the <see cref="T:Eu.EDelivery.AS4.Fe.Pmodes.PmodeService" /> class.
            </summary>
            <param name="source">The source.</param>
            <param name="disableValidation">if set to <c>true</c> [disable validation].</param>
        </member>
        <member name="M:Eu.EDelivery.AS4.Fe.Pmodes.PmodeService.GetReceivingNames">
            <summary>
                Gets the receiving names.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Eu.EDelivery.AS4.Fe.Pmodes.PmodeService.GetReceivingByName(System.String)">
            <summary>
                Get a list of receiving pmodes
            </summary>
            <param name="name">The name of the pmode.</param>
            <returns></returns>
        </member>
        <member name="M:Eu.EDelivery.AS4.Fe.Pmodes.PmodeService.GetSendingNames">
            <summary>
                Get a list of sending pmodes
            </summary>
            <returns></returns>
        </member>
        <member name="M:Eu.EDelivery.AS4.Fe.Pmodes.PmodeService.GetSendingByName(System.String)">
            <summary>
                Get a sending pmode by name
            </summary>
            <param name="name">The name of the pmode.</param>
            <returns></returns>
        </member>
        <member name="M:Eu.EDelivery.AS4.Fe.Pmodes.PmodeService.CreateReceiving(Eu.EDelivery.AS4.Fe.Pmodes.Model.ReceivingBasePmode)">
            <summary>
                Create a receiving pmode
            </summary>
            <param name="basePmode">The pmode to create</param>
            <returns></returns>
            <exception cref="T:Eu.EDelivery.AS4.Fe.AlreadyExistsException">
                Exception thrown when a pmode with the supplied name
                already exists
            </exception>
        </member>
        <member name="M:Eu.EDelivery.AS4.Fe.Pmodes.PmodeService.CreateSending(Eu.EDelivery.AS4.Fe.Pmodes.Model.SendingBasePmode)">
            <summary>
                Create sending pmode
            </summary>
            <param name="basePmode">The pmode to create.</param>
            <returns></returns>
            <exception cref="T:Eu.EDelivery.AS4.Fe.AlreadyExistsException">
                Exception thrown when a pmode with the supplied name
                already exists
            </exception>
        </member>
        <member name="M:Eu.EDelivery.AS4.Fe.Pmodes.PmodeService.DeleteReceiving(System.String)">
            <summary>
                Delete a receiving pmode
            </summary>
            <param name="name">The name of the pmode to delete.</param>
            <returns></returns>
            <exception cref="T:Eu.EDelivery.AS4.Fe.NotFoundException">Exception thrown when the pmode doesn't exist</exception>
        </member>
        <member name="M:Eu.EDelivery.AS4.Fe.Pmodes.PmodeService.DeleteSending(System.String)">
            <summary>
                Delete a sending pmode
            </summary>
            <param name="name">The name.</param>
            <returns></returns>
            <exception cref="T:Eu.EDelivery.AS4.Fe.NotFoundException">Exception thrown when the pmode doesn't exist</exception>
        </member>
        <member name="M:Eu.EDelivery.AS4.Fe.Pmodes.PmodeService.UpdateSending(Eu.EDelivery.AS4.Fe.Pmodes.Model.SendingBasePmode,System.String)">
            <summary>
                Update sending pmode
            </summary>
            <param name="basePmode">Date to update the sending pmode with</param>
            <param name="originalName">Name of the original.</param>
            <returns></returns>
            <exception cref="T:Eu.EDelivery.AS4.Fe.AlreadyExistsException">
                Exception thrown when a sending pmode with the supplied
                name already exists
            </exception>
        </member>
        <member name="M:Eu.EDelivery.AS4.Fe.Pmodes.PmodeService.UpdateReceiving(Eu.EDelivery.AS4.Fe.Pmodes.Model.ReceivingBasePmode,System.String)">
            <summary>
                Update receiving pmode
            </summary>
            <param name="basePmode">The base pmode.</param>
            <param name="originalName">Name of the original.</param>
            <returns></returns>
            <exception cref="T:Eu.EDelivery.AS4.Fe.AlreadyExistsException">
                Exception thrown when a pmode with the supplied name
                already exists.
            </exception>
        </member>
        <member name="M:Eu.EDelivery.AS4.Fe.Pmodes.PmodeService.ValidateSendingPmode(Eu.EDelivery.AS4.Fe.Pmodes.Model.SendingBasePmode)">
            <summary>
            Validates the sending pmode.
            </summary>
            <param name="sendingPmode">The sending pmode.</param>
            <exception cref="T:Eu.EDelivery.AS4.Model.PMode.InvalidPModeException">Invalid PMode</exception>
        </member>
        <member name="T:Eu.EDelivery.AS4.Fe.Pmodes.ValidationErrorExtensions">
            <summary>
                FluentValidation error collection extensions
            </summary>
        </member>
        <member name="M:Eu.EDelivery.AS4.Fe.Pmodes.ValidationErrorExtensions.ToStringList(System.Collections.Generic.IList{FluentValidation.Results.ValidationFailure})">
            <summary>
                Returns a <see cref="T:System.String" /> that represents this instance.
            </summary>
            <param name="failures">The failures.</param>
            <returns>
                A <see cref="T:System.String" /> that represents this instance.
            </returns>
        </member>
        <member name="T:Eu.EDelivery.AS4.Fe.Runtime.IRuntimeLoader">
            <summary>
            Interface to implement a runtime loader
            </summary>
            <seealso cref="T:Eu.EDelivery.AS4.Fe.Modules.IModular" />
        </member>
        <member name="P:Eu.EDelivery.AS4.Fe.Runtime.IRuntimeLoader.Receivers">
            <summary>
            Gets the receivers.
            </summary>
            <value>
            The receivers.
            </value>
        </member>
        <member name="P:Eu.EDelivery.AS4.Fe.Runtime.IRuntimeLoader.Steps">
            <summary>
            Gets the steps.
            </summary>
            <value>
            The steps.
            </value>
        </member>
        <member name="P:Eu.EDelivery.AS4.Fe.Runtime.IRuntimeLoader.Transformers">
            <summary>
            Gets the transformers.
            </summary>
            <value>
            The transformers.
            </value>
        </member>
        <member name="P:Eu.EDelivery.AS4.Fe.Runtime.IRuntimeLoader.CertificateRepositories">
            <summary>
            Gets the certificate repositories.
            </summary>
            <value>
            The certificate repositories.
            </value>
        </member>
        <member name="P:Eu.EDelivery.AS4.Fe.Runtime.IRuntimeLoader.DeliverSenders">
            <summary>
            Gets the deliver senders.
            </summary>
            <value>
            The deliver senders.
            </value>
        </member>
        <member name="P:Eu.EDelivery.AS4.Fe.Runtime.IRuntimeLoader.ReceivingPmode">
            <summary>
            Gets the receiving pmode.
            </summary>
            <value>
            The receiving pmode.
            </value>
        </member>
        <member name="M:Eu.EDelivery.AS4.Fe.Runtime.IRuntimeLoader.Initialize">
            <summary>
            Initializes this instance.
            </summary>
            <returns></returns>
        </member>
        <member name="T:Eu.EDelivery.AS4.Fe.Runtime.ItemType">
            <summary>
            Class to hold runtime type information
            </summary>
        </member>
        <member name="P:Eu.EDelivery.AS4.Fe.Runtime.ItemType.Name">
            <summary>
            Gets or sets the name.
            </summary>
            <value>
            The name.
            </value>
        </member>
        <member name="P:Eu.EDelivery.AS4.Fe.Runtime.ItemType.Properties">
            <summary>
            Gets or sets the properties.
            </summary>
            <value>
            The properties.
            </value>
        </member>
        <member name="P:Eu.EDelivery.AS4.Fe.Runtime.ItemType.TechnicalName">
            <summary>
            Gets the name the technical name. This is the name as known in the code.
            </summary>
            <value>
            The name of the technical.
            </value>
        </member>
        <member name="P:Eu.EDelivery.AS4.Fe.Runtime.ItemType.Description">
            <summary>
            Gets or sets the description.
            </summary>
            <value>
            The description.
            </value>
        </member>
        <member name="T:Eu.EDelivery.AS4.Fe.Runtime.Property">
            <summary>
            Class to hold property information
            </summary>
        </member>
        <member name="P:Eu.EDelivery.AS4.Fe.Runtime.Property.FriendlyName">
            <summary>
            Gets or sets the name of the friendly. Which is displayed in the FE.
            </summary>
            <value>
            The name of the friendly.
            </value>
        </member>
        <member name="P:Eu.EDelivery.AS4.Fe.Runtime.Property.TechnicalName">
            <summary>
            Gets or sets the name of the technical. The name known in the code.
            </summary>
            <value>
            The name of the technical.
            </value>
        </member>
        <member name="P:Eu.EDelivery.AS4.Fe.Runtime.Property.Type">
            <summary>
            Gets or sets the data type.
            </summary>
            <value>
            The type.
            </value>
        </member>
        <member name="P:Eu.EDelivery.AS4.Fe.Runtime.Property.Regex">
            <summary>
            Gets or sets the regex. Which is used to limit/validate string input.
            </summary>
            <value>
            The regex.
            </value>
        </member>
        <member name="P:Eu.EDelivery.AS4.Fe.Runtime.Property.Description">
            <summary>
            Gets or sets the description which is shown in the ui.
            </summary>
            <value>
            The description.
            </value>
        </member>
        <member name="P:Eu.EDelivery.AS4.Fe.Runtime.Property.DefaultValue">
            <summary>
            The default value
            </summary>
        </member>
        <member name="P:Eu.EDelivery.AS4.Fe.Runtime.Property.Properties">
            <summary>
            Gets or sets the child properties.
            </summary>
            <value>
            The properties.
            </value>
        </member>
        <member name="P:Eu.EDelivery.AS4.Fe.Runtime.Property.Required">
            <summary>
            Gets or sets if the property is required.
            </summary>
            <value>
            The required.
            </value>
        </member>
        <member name="P:Eu.EDelivery.AS4.Fe.Runtime.Property.Attributes">
            <summary>
            Gets or sets the attributes which can be set for this setting.
            </summary>
            <value>
            The attributes.
            </value>
        </member>
        <member name="T:Eu.EDelivery.AS4.Fe.Runtime.RuntimeController">
            <summary>
            Controller to get AS4 runtime types
            </summary>
        </member>
        <member name="M:Eu.EDelivery.AS4.Fe.Runtime.RuntimeController.#ctor(Eu.EDelivery.AS4.Fe.Runtime.IRuntimeLoader)">
            <summary>
            Initializes a new instance of the <see cref="T:Eu.EDelivery.AS4.Fe.Runtime.RuntimeController"/> class.
            </summary>
            <param name="runtimeLoader">The runtime loader.</param>
        </member>
        <member name="M:Eu.EDelivery.AS4.Fe.Runtime.RuntimeController.GetReceivers">
            <summary>
            Get receivers
            </summary>
            <returns></returns>
        </member>
        <member name="M:Eu.EDelivery.AS4.Fe.Runtime.RuntimeController.GetSteps">
            <summary>
            Get a list of steps.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Eu.EDelivery.AS4.Fe.Runtime.RuntimeController.GetTransformerList">
            <summary>
            Gets the transformer list.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Eu.EDelivery.AS4.Fe.Runtime.RuntimeController.GetCertificateRepositories">
            <summary>
            Gets the certificate repositories.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Eu.EDelivery.AS4.Fe.Runtime.RuntimeController.GetDeliverSenders">
            <summary>
            Gets the deliver senders.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Eu.EDelivery.AS4.Fe.Runtime.RuntimeController.GetAllRuntimeTypes">
            <summary>
            Gets all runtime types.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Eu.EDelivery.AS4.Fe.Runtime.RuntimeController.GetRuntimeMetaData">
            <summary>
            Get metadata for all the AS4 runtime types.
            This will return all the attributes used in the code.
            </summary>
            <returns></returns>
        </member>
        <member name="T:Eu.EDelivery.AS4.Fe.Runtime.RuntimeLoader">
            <summary>
            Runtime load
            </summary>
            <seealso cref="T:Eu.EDelivery.AS4.Fe.Runtime.IRuntimeLoader" />
        </member>
        <member name="M:Eu.EDelivery.AS4.Fe.Runtime.RuntimeLoader.#ctor(Microsoft.Extensions.Options.IOptions{Eu.EDelivery.AS4.Fe.Settings.ApplicationSettings})">
            <summary>
            Initializes a new instance of the <see cref="T:Eu.EDelivery.AS4.Fe.Runtime.RuntimeLoader"/> class.
            </summary>
            <param name="settings">The settings.</param>
        </member>
        <member name="P:Eu.EDelivery.AS4.Fe.Runtime.RuntimeLoader.Receivers">
            <summary>
            Gets the receivers.
            </summary>
            <value>
            The receivers.
            </value>
        </member>
        <member name="P:Eu.EDelivery.AS4.Fe.Runtime.RuntimeLoader.Steps">
            <summary>
            Gets the steps.
            </summary>
            <value>
            The steps.
            </value>
        </member>
        <member name="P:Eu.EDelivery.AS4.Fe.Runtime.RuntimeLoader.Transformers">
            <summary>
            Gets the transformers.
            </summary>
            <value>
            The transformers.
            </value>
        </member>
        <member name="P:Eu.EDelivery.AS4.Fe.Runtime.RuntimeLoader.CertificateRepositories">
            <summary>
            Gets the certificate repositories.
            </summary>
            <value>
            The certificate repositories.
            </value>
        </member>
        <member name="P:Eu.EDelivery.AS4.Fe.Runtime.RuntimeLoader.DeliverSenders">
            <summary>
            Gets the deliver senders.
            </summary>
            <value>
            The deliver senders.
            </value>
        </member>
        <member name="P:Eu.EDelivery.AS4.Fe.Runtime.RuntimeLoader.ReceivingPmode">
            <summary>
            Gets the receiving pmode.
            </summary>
            <value>
            The receiving pmode.
            </value>
        </member>
        <member name="M:Eu.EDelivery.AS4.Fe.Runtime.RuntimeLoader.Initialize">
            <summary>
            Load the information from the AS4 runtime
            </summary>
            <returns></returns>
            <exception cref="T:System.Exception"></exception>
        </member>
        <member name="M:Eu.EDelivery.AS4.Fe.Runtime.RuntimeLoader.LoadTypesFromAssemblies">
            <summary>
            Get all types from all assemblies.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Eu.EDelivery.AS4.Fe.Runtime.RuntimeLoader.LoadImplementationsForType(System.Collections.Generic.List{Mono.Cecil.TypeDefinition},System.String,System.Boolean)">
            <summary>
            Get implemenation
            </summary>
            <param name="types">The types.</param>
            <param name="type">The type.</param>
            <param name="onlyWithAttribute">Indicates that when building the properties only properties decorated with an attribute should be scanned.</param>
            <returns></returns>
        </member>
        <member name="T:Eu.EDelivery.AS4.Fe.Settings.As4SettingsService">
            <summary>
            Service to manage settings.xml
            </summary>
            <seealso cref="T:Eu.EDelivery.AS4.Fe.Settings.IAs4SettingsService" />
        </member>
        <member name="M:Eu.EDelivery.AS4.Fe.Settings.As4SettingsService.#ctor(AutoMapper.IMapper,Eu.EDelivery.AS4.Fe.Settings.ISettingsSource)">
            <summary>
            Initializes a new instance of the <see cref="T:Eu.EDelivery.AS4.Fe.Settings.As4SettingsService"/> class.
            </summary>
            <param name="mapper">The mapper.</param>
            <param name="settingsSource">The settings source.</param>
        </member>
        <member name="M:Eu.EDelivery.AS4.Fe.Settings.As4SettingsService.SaveBaseSettings(Eu.EDelivery.AS4.Fe.Models.BaseSettings)">
            <summary>
            Saves the base settings.
            </summary>
            <param name="settings">The settings.</param>
            <returns></returns>
        </member>
        <member name="M:Eu.EDelivery.AS4.Fe.Settings.As4SettingsService.SaveCustomSettings(Eu.EDelivery.AS4.Model.Internal.CustomSettings)">
            <summary>
            Saves the custom settings.
            </summary>
            <param name="settings">The settings.</param>
            <returns></returns>
        </member>
        <member name="M:Eu.EDelivery.AS4.Fe.Settings.As4SettingsService.SaveDatabaseSettings(Eu.EDelivery.AS4.Model.Internal.SettingsDatabase)">
            <summary>
            Saves the database settings.
            </summary>
            <param name="settings">The settings.</param>
            <returns></returns>
        </member>
        <member name="M:Eu.EDelivery.AS4.Fe.Settings.As4SettingsService.CreateAgent(Eu.EDelivery.AS4.Model.Internal.AgentSettings,System.Func{Eu.EDelivery.AS4.Model.Internal.SettingsAgents,Eu.EDelivery.AS4.Model.Internal.AgentSettings[]},System.Action{Eu.EDelivery.AS4.Model.Internal.SettingsAgents,Eu.EDelivery.AS4.Model.Internal.AgentSettings[]})">
            <summary>
            Creates the agent.
            </summary>
            <param name="settingsAgent">The settings agent.</param>
            <param name="getAgents">The get agents.</param>
            <param name="setAgents">The set agents.</param>
            <returns></returns>
            <exception cref="T:Eu.EDelivery.AS4.Fe.AlreadyExistsException">Indicates that an agent with the name already exists.</exception>
        </member>
        <member name="M:Eu.EDelivery.AS4.Fe.Settings.As4SettingsService.UpdateAgent(Eu.EDelivery.AS4.Model.Internal.AgentSettings,System.String,System.Func{Eu.EDelivery.AS4.Model.Internal.SettingsAgents,Eu.EDelivery.AS4.Model.Internal.AgentSettings[]},System.Action{Eu.EDelivery.AS4.Model.Internal.SettingsAgents,Eu.EDelivery.AS4.Model.Internal.AgentSettings[]})">
            <summary>
            Updates the agent.
            </summary>
            <param name="settingsAgent">The settings agent.</param>
            <param name="originalAgentName">Name of the original agent.</param>
            <param name="getAgents">The get agents.</param>
            <param name="setAgents">The set agents.</param>
            <returns></returns>
            <exception cref="T:Eu.EDelivery.AS4.Fe.AlreadyExistsException">Indicates that an agent with the name already exists</exception>
            <exception cref="T:Eu.EDelivery.AS4.Fe.NotFoundException">Agent doesn't exist</exception>
        </member>
        <member name="M:Eu.EDelivery.AS4.Fe.Settings.As4SettingsService.DeleteAgent(System.String,System.Func{Eu.EDelivery.AS4.Model.Internal.SettingsAgents,Eu.EDelivery.AS4.Model.Internal.AgentSettings[]},System.Action{Eu.EDelivery.AS4.Model.Internal.SettingsAgents,Eu.EDelivery.AS4.Model.Internal.AgentSettings[]})">
            <summary>
            Deletes the agent.
            </summary>
            <param name="name">The name.</param>
            <param name="getAgents">The get agents.</param>
            <param name="setAgents">The set agents.</param>
            <returns></returns>
            <exception cref="T:Eu.EDelivery.AS4.Fe.NotFoundException"></exception>
        </member>
        <member name="M:Eu.EDelivery.AS4.Fe.Settings.As4SettingsService.GetSettings">
            <summary>
            Get settings
            </summary>
            <returns>Setting</returns>
        </member>
        <member name="T:Eu.EDelivery.AS4.Fe.Settings.IAs4SettingsService">
            <summary>
            Service to manage settings.xml
            </summary>
        </member>
        <member name="M:Eu.EDelivery.AS4.Fe.Settings.IAs4SettingsService.SaveBaseSettings(Eu.EDelivery.AS4.Fe.Models.BaseSettings)">
            <summary>
            Saves the base settings.
            </summary>
            <param name="settings">The settings.</param>
            <returns></returns>
        </member>
        <member name="M:Eu.EDelivery.AS4.Fe.Settings.IAs4SettingsService.SaveCustomSettings(Eu.EDelivery.AS4.Model.Internal.CustomSettings)">
            <summary>
            Saves the custom settings.
            </summary>
            <param name="settings">The settings.</param>
            <returns></returns>
        </member>
        <member name="M:Eu.EDelivery.AS4.Fe.Settings.IAs4SettingsService.SaveDatabaseSettings(Eu.EDelivery.AS4.Model.Internal.SettingsDatabase)">
            <summary>
            Saves the database settings.
            </summary>
            <param name="settings">The settings.</param>
            <returns></returns>
        </member>
        <member name="M:Eu.EDelivery.AS4.Fe.Settings.IAs4SettingsService.CreateAgent(Eu.EDelivery.AS4.Model.Internal.AgentSettings,System.Func{Eu.EDelivery.AS4.Model.Internal.SettingsAgents,Eu.EDelivery.AS4.Model.Internal.AgentSettings[]},System.Action{Eu.EDelivery.AS4.Model.Internal.SettingsAgents,Eu.EDelivery.AS4.Model.Internal.AgentSettings[]})">
            <summary>
            Creates the agent.
            </summary>
            <param name="settingsAgent">The settings agent.</param>
            <param name="getAgents">The get agents.</param>
            <param name="setAgents">The set agents.</param>
            <returns></returns>
            <exception cref="T:Eu.EDelivery.AS4.Fe.AlreadyExistsException">Indicates that an agent with the name already exists.</exception>
        </member>
        <member name="M:Eu.EDelivery.AS4.Fe.Settings.IAs4SettingsService.UpdateAgent(Eu.EDelivery.AS4.Model.Internal.AgentSettings,System.String,System.Func{Eu.EDelivery.AS4.Model.Internal.SettingsAgents,Eu.EDelivery.AS4.Model.Internal.AgentSettings[]},System.Action{Eu.EDelivery.AS4.Model.Internal.SettingsAgents,Eu.EDelivery.AS4.Model.Internal.AgentSettings[]})">
            <summary>
            Updates the agent.
            </summary>
            <param name="settingsAgent">The settings agent.</param>
            <param name="originalAgentName">Name of the original agent.</param>
            <param name="getAgents">The get agents.</param>
            <param name="setAgents">The set agents.</param>
            <returns></returns>
            <exception cref="T:Eu.EDelivery.AS4.Fe.AlreadyExistsException">Indicates that an agent with the name already exists</exception>
            <exception cref="T:Eu.EDelivery.AS4.Fe.NotFoundException">Agent doesn't exist</exception>
        </member>
        <member name="M:Eu.EDelivery.AS4.Fe.Settings.IAs4SettingsService.DeleteAgent(System.String,System.Func{Eu.EDelivery.AS4.Model.Internal.SettingsAgents,Eu.EDelivery.AS4.Model.Internal.AgentSettings[]},System.Action{Eu.EDelivery.AS4.Model.Internal.SettingsAgents,Eu.EDelivery.AS4.Model.Internal.AgentSettings[]})">
            <summary>
            Deletes the agent.
            </summary>
            <param name="name">The name.</param>
            <param name="getAgents">The get agents.</param>
            <param name="setAgents">The set agents.</param>
            <returns></returns>
            <exception cref="T:Eu.EDelivery.AS4.Fe.NotFoundException"></exception>
        </member>
        <member name="M:Eu.EDelivery.AS4.Fe.Settings.IAs4SettingsService.GetSettings">
            <summary>
            Get settings
            </summary>
            <returns>Setting</returns>
        </member>
        <member name="M:Eu.EDelivery.AS4.Fe.Startup.Configure(Microsoft.AspNetCore.Builder.IApplicationBuilder,Microsoft.AspNetCore.Hosting.IHostingEnvironment,Microsoft.Extensions.Logging.ILoggerFactory)">
            <summary>
                Configures the specified application.
            </summary>
            <param name="app">The application.</param>
            <param name="env">The env.</param>
            <param name="loggerFactory">The logger factory.</param>
        </member>
        <member name="T:Eu.EDelivery.AS4.Fe.SubmitTool.FileMessageHandler">
            <summary>
            File system message handler
            </summary>
            <seealso cref="T:Eu.EDelivery.AS4.Fe.SubmitTool.IMessageHandler" />
        </member>
        <member name="M:Eu.EDelivery.AS4.Fe.SubmitTool.FileMessageHandler.CanHandle(System.String)">
            <summary>
            Determines whether this instance can handle the specified location.
            </summary>
            <param name="location">The location.</param>
            <returns>
              <c>true</c> if this instance can handle the specified location; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:Eu.EDelivery.AS4.Fe.SubmitTool.FileMessageHandler.Handle(Eu.EDelivery.AS4.Model.Submit.SubmitMessage,System.String)">
            <summary>
            Handles the specified message.
            </summary>
            <param name="message">The message.</param>
            <param name="toLocation">To location.</param>
            <returns></returns>
            <exception cref="T:Eu.EDelivery.AS4.Fe.BusinessException"></exception>
        </member>
        <member name="T:Eu.EDelivery.AS4.Fe.SubmitTool.FilePayload">
            <summary>
            Class to hold the message payloads
            </summary>
        </member>
        <member name="P:Eu.EDelivery.AS4.Fe.SubmitTool.FilePayload.MimeType">
            <summary>
            Gets or sets the type of the MIME.
            </summary>
            <value>
            The type of the MIME.
            </value>
        </member>
        <member name="P:Eu.EDelivery.AS4.Fe.SubmitTool.FilePayload.Location">
            <summary>
            Gets or sets the location.
            </summary>
            <value>
            The location.
            </value>
        </member>
        <member name="P:Eu.EDelivery.AS4.Fe.SubmitTool.FilePayload.FileName">
            <summary>
            Gets or sets the name of the file.
            </summary>
            <value>
            The name of the file.
            </value>
        </member>
        <member name="M:Eu.EDelivery.AS4.Fe.SubmitTool.FilePayload.ToPayload(System.String)">
            <summary>
            Convert this class to a payload class
            </summary>
            <param name="payloadId">The payload identifier.</param>
            <returns></returns>
        </member>
        <member name="T:Eu.EDelivery.AS4.Fe.SubmitTool.FilePayloadHandler">
            <summary>
            Handle payloads by saving them to a file
            </summary>
            <seealso cref="T:Eu.EDelivery.AS4.Fe.SubmitTool.IPayloadHandler" />
        </member>
        <member name="M:Eu.EDelivery.AS4.Fe.SubmitTool.FilePayloadHandler.CanHandle(System.String)">
            <summary>
            Determines whether this instance can handle the specified location.
            </summary>
            <param name="location">The location.</param>
            <returns>
              <c>true</c> if this instance can handle the specified location; otherwise, <c>false</c>.
            </returns>
            <exception cref="T:System.NotImplementedException"></exception>
        </member>
        <member name="M:Eu.EDelivery.AS4.Fe.SubmitTool.FilePayloadHandler.Handle(System.String,System.String,System.IO.Stream)">
            <summary>
            Handles the specified location.
            </summary>
            <param name="location">The location to send to payload to.</param>
            <param name="fileName"></param>
            <param name="stream">The stream containing the payload.</param>
            <returns>
            String containing the location of the payload.
            </returns>
        </member>
        <member name="T:Eu.EDelivery.AS4.Fe.SubmitTool.IHandler">
            <summary>
            Base Interface to implement submit message creator handlers
            </summary>
        </member>
        <member name="M:Eu.EDelivery.AS4.Fe.SubmitTool.IHandler.CanHandle(System.String)">
            <summary>
            Determines whether this instance can handle the specified location.
            </summary>
            <param name="location">The location.</param>
            <returns>
              <c>true</c> if this instance can handle the specified location; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="T:Eu.EDelivery.AS4.Fe.SubmitTool.IMessageHandler">
            <summary>
            Message handler interface
            </summary>
            <seealso cref="T:Eu.EDelivery.AS4.Fe.SubmitTool.IHandler" />
        </member>
        <member name="M:Eu.EDelivery.AS4.Fe.SubmitTool.IMessageHandler.Handle(Eu.EDelivery.AS4.Model.Submit.SubmitMessage,System.String)">
            <summary>
            Handles the specified message.
            </summary>
            <param name="message">The message.</param>
            <param name="toLocation">To location.</param>
            <returns></returns>
        </member>
        <member name="T:Eu.EDelivery.AS4.Fe.SubmitTool.IPayloadHandler">
            <summary>
            Payload handler interface
            </summary>
            <seealso cref="T:Eu.EDelivery.AS4.Fe.SubmitTool.IHandler" />
        </member>
        <member name="M:Eu.EDelivery.AS4.Fe.SubmitTool.IPayloadHandler.Handle(System.String,System.String,System.IO.Stream)">
            <summary>
            Handles the specified location.
            </summary>
            <param name="location">The location to send to payload to.</param>
            <param name="fileName"></param>
            <param name="stream">The stream containing the payload.</param>
            <returns>String containing the location of the file.</returns>
        </member>
        <member name="T:Eu.EDelivery.AS4.Fe.SubmitTool.ISubmitMessageCreator">
            <summary>
            Interface to be implemented to make a message creator for the submit tool.
            </summary>
        </member>
        <member name="M:Eu.EDelivery.AS4.Fe.SubmitTool.ISubmitMessageCreator.CreateSubmitMessages(Eu.EDelivery.AS4.Fe.SubmitTool.MessagePayload)">
            <summary>
            Submit a message
            </summary>
            <param name="submitInfo">The submit information.</param>
            <returns></returns>
        </member>
        <member name="T:Eu.EDelivery.AS4.Fe.SubmitTool.MessagePayload">
            <summary>
            Class that holds the parameters for the submit tool
            </summary>
        </member>
        <member name="P:Eu.EDelivery.AS4.Fe.SubmitTool.MessagePayload.SendingPmode">
            <summary>
            Gets or sets the sending pmode which is used to build the message.
            </summary>
            <value>
            The sending pmode.
            </value>
        </member>
        <member name="P:Eu.EDelivery.AS4.Fe.SubmitTool.MessagePayload.NumberOfSubmitMessages">
            <summary>
            Gets or sets the number of submit messages to submit.
            When more than 1 message is supplied then the other messages will just be a copy.
            </summary>
            <value>
            The number of submit messages.
            </value>
        </member>
        <member name="P:Eu.EDelivery.AS4.Fe.SubmitTool.MessagePayload.Files">
            <summary>
            Gets or sets the files to add as payload.
            </summary>
            <value>
            The files.
            </value>
        </member>
        <member name="T:Eu.EDelivery.AS4.Fe.SubmitTool.MshMessageHandler">
            <summary>
            Send messages to an MSH endpoint
            </summary>
            <seealso cref="T:Eu.EDelivery.AS4.Fe.SubmitTool.IMessageHandler" />
        </member>
        <member name="M:Eu.EDelivery.AS4.Fe.SubmitTool.MshMessageHandler.CanHandle(System.String)">
            <summary>
            Determines whether this instance can handle the specified location.
            </summary>
            <param name="location">The location.</param>
            <returns>
              <c>true</c> if this instance can handle the specified location; otherwise, <c>false</c>.
            </returns>
            <exception cref="T:System.NotImplementedException"></exception>
        </member>
        <member name="M:Eu.EDelivery.AS4.Fe.SubmitTool.MshMessageHandler.Handle(Eu.EDelivery.AS4.Model.Submit.SubmitMessage,System.String)">
            <summary>
            Handles the specified message.
            </summary> 
            <param name="message">The message.</param>
            <param name="toLocation">To location.</param>
            <returns></returns>
            <exception cref="T:Eu.EDelivery.AS4.Fe.BusinessException">
            </exception>
        </member>
        <member name="T:Eu.EDelivery.AS4.Fe.SubmitTool.PayloadHttpServiceHandler">
            <summary>
            Implementation to upload payloads to a payload service
            </summary>
            <seealso cref="T:Eu.EDelivery.AS4.Fe.SubmitTool.IPayloadHandler" />
        </member>
        <member name="M:Eu.EDelivery.AS4.Fe.SubmitTool.PayloadHttpServiceHandler.CanHandle(System.String)">
            <summary>
            Determines whether this instance can handle the specified location.
            </summary>
            <param name="location">The location.</param>
            <returns>
              <c>true</c> if this instance can handle the specified location; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:Eu.EDelivery.AS4.Fe.SubmitTool.PayloadHttpServiceHandler.Handle(System.String,System.String,System.IO.Stream)">
            <summary>
            Handles the specified location.
            </summary>
            <param name="location">The location to send to payload to.</param>
            <param name="fileName"></param>
            <param name="stream">The stream containing the payload.</param>
            <returns>String containing the download url to be used in the message.</returns>
        </member>
        <member name="T:Eu.EDelivery.AS4.Fe.SubmitTool.SimulatePayloadServiceHandler">
            <summary>
            Handle dummy payloads
            </summary>
            <seealso cref="T:Eu.EDelivery.AS4.Fe.SubmitTool.IPayloadHandler" />
        </member>
        <member name="M:Eu.EDelivery.AS4.Fe.SubmitTool.SimulatePayloadServiceHandler.CanHandle(System.String)">
            <summary>
            Determines whether this instance can handle the specified location.
            </summary>
            <param name="location">The location.</param>
            <returns>
              <c>true</c> if this instance can handle the specified location; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:Eu.EDelivery.AS4.Fe.SubmitTool.SimulatePayloadServiceHandler.Handle(System.String,System.String,System.IO.Stream)">
            <summary>
            Handles the specified location.
            </summary>
            <param name="location">The location to send to payload to.</param>
            <param name="fileName"></param>
            <param name="stream">The stream containing the payload.</param>
            <returns>
            String containing the location of the file.
            </returns>
            <exception cref="T:System.NotImplementedException"></exception>
        </member>
        <member name="T:Eu.EDelivery.AS4.Fe.SubmitTool.SubmitMessageCreator">
            <summary>
                Implementation of ISubmitMessageCreator
            </summary>
            <seealso cref="T:Eu.EDelivery.AS4.Fe.SubmitTool.ISubmitMessageCreator" />
        </member>
        <member name="M:Eu.EDelivery.AS4.Fe.SubmitTool.SubmitMessageCreator.#ctor(Eu.EDelivery.AS4.Fe.Pmodes.IPmodeService,System.Collections.Generic.IEnumerable{Eu.EDelivery.AS4.Fe.SubmitTool.IPayloadHandler},System.Collections.Generic.IEnumerable{Eu.EDelivery.AS4.Fe.SubmitTool.IMessageHandler},Microsoft.Extensions.Options.IOptions{Eu.EDelivery.AS4.Fe.SubmitTool.SubmitToolOptions},Eu.EDelivery.AS4.Fe.Monitor.IClient)">
            <summary>
                Initializes a new instance of the <see cref="T:Eu.EDelivery.AS4.Fe.SubmitTool.SubmitMessageCreator" /> class.
            </summary>
            <param name="pmodeService">The pmode service.</param>
            <param name="payloadHandlers">The payload handlers.</param>
            <param name="messageHandlers">The message handlers.</param>
            <param name="options">The configuration options.</param>
            <param name="client">The SignalR client.</param>
        </member>
        <member name="M:Eu.EDelivery.AS4.Fe.SubmitTool.SubmitMessageCreator.CreateSubmitMessages(Eu.EDelivery.AS4.Fe.SubmitTool.MessagePayload)">
            <summary>
                Submit one or more message(s)
            </summary>
            <param name="submitInfo">The submit information.</param>
            <returns></returns>
            <exception cref="T:Eu.EDelivery.AS4.Fe.BusinessException">
                Missing to location
                or
                Missing payload location
                or
                Invalid number of submit messages value. Only a value between 1 &amp; 999 is allowed.
                or
                Could not find pmode
            </exception>
        </member>
        <member name="T:Eu.EDelivery.AS4.Fe.SubmitTool.SubmitToolController">
            <summary>
                Controller for the submit tool
            </summary>
            <seealso cref="T:Microsoft.AspNetCore.Mvc.Controller" />
        </member>
        <member name="M:Eu.EDelivery.AS4.Fe.SubmitTool.SubmitToolController.#ctor(Eu.EDelivery.AS4.Fe.SubmitTool.ISubmitMessageCreator)">
            <summary>
                Initializes a new instance of the <see cref="T:Eu.EDelivery.AS4.Fe.SubmitTool.SubmitToolController" /> class.
            </summary>
            <param name="submitMessageCreator">The submit message creator.</param>
        </member>
        <member name="M:Eu.EDelivery.AS4.Fe.SubmitTool.SubmitToolController.Post">
            <summary>
                Post method to submit a message
            </summary>
            <returns></returns>
        </member>
        <member name="T:Eu.EDelivery.AS4.Fe.SubmitTool.SubmitToolOptions">
            <summary>
            The config options for the submit tool
            </summary>
        </member>
        <member name="P:Eu.EDelivery.AS4.Fe.SubmitTool.SubmitToolOptions.ToHttpAddress">
            <summary>
            Gets or sets to HTTP address to send the submitmessage to.
            </summary>
            <value>
            To HTTP address.
            </value>
        </member>
        <member name="P:Eu.EDelivery.AS4.Fe.SubmitTool.SubmitToolOptions.PayloadHttpAddress">
            <summary>
            Gets or sets the payload HTTP address to send the payload(s) to.
            </summary>
            <value>
            The payload HTTP address.
            </value>
        </member>
        <member name="T:Eu.EDelivery.AS4.Fe.SubmitTool.SubmitToolSetup">
            <summary>
            Setup submit tool dependencies
            </summary>
            <seealso cref="T:Eu.EDelivery.AS4.Fe.Pmodes.IPmodeSetup" />
        </member>
        <member name="M:Eu.EDelivery.AS4.Fe.SubmitTool.SubmitToolSetup.Run(Microsoft.Extensions.DependencyInjection.IServiceCollection,Microsoft.Extensions.Configuration.IConfigurationRoot)">
            <summary>
            Runs the specified services.
            </summary>
            <param name="services">The services.</param>
            <param name="configuration">The configuration.</param>
        </member>
        <member name="T:Eu.EDelivery.AS4.Fe.Swagger.FileUploadOperation">
            <summary>
            Swagger operation filter to setup the submit tool upload data
            </summary>
            <seealso cref="T:Swashbuckle.AspNetCore.SwaggerGen.IOperationFilter" />
        </member>
        <member name="M:Eu.EDelivery.AS4.Fe.Swagger.FileUploadOperation.Apply(Swashbuckle.AspNetCore.Swagger.Operation,Swashbuckle.AspNetCore.SwaggerGen.OperationFilterContext)">
            <summary>
            Applies the specified operation.
            </summary>
            <param name="operation">The operation.</param>
            <param name="context">The context.</param>
        </member>
        <member name="T:Eu.EDelivery.AS4.Fe.Swagger.ISwaggerSetup">
            <summary>
            Setup swagger
            </summary>
            <seealso cref="T:Eu.EDelivery.AS4.Fe.Modules.IModular" />
            <seealso cref="T:Eu.EDelivery.AS4.Fe.Modules.IRunAtAppConfiguration" />
            <seealso cref="T:Eu.EDelivery.AS4.Fe.Modules.IRunAtServicesStartup" />
        </member>
        <member name="T:Eu.EDelivery.AS4.Fe.Swagger.SwaggerSetup">
            <summary>
            Setup swagger
            </summary>
            <seealso cref="T:Eu.EDelivery.AS4.Fe.Swagger.ISwaggerSetup" />
        </member>
        <member name="M:Eu.EDelivery.AS4.Fe.Swagger.SwaggerSetup.Run(Microsoft.AspNetCore.Builder.IApplicationBuilder)">
            <summary>
            Runs the specified application.
            </summary>
            <param name="app">The application.</param>
        </member>
        <member name="M:Eu.EDelivery.AS4.Fe.Swagger.SwaggerSetup.Run(Microsoft.Extensions.DependencyInjection.IServiceCollection,Microsoft.Extensions.Configuration.IConfigurationRoot)">
            <summary>
            Runs the specified services.
            </summary>
            <param name="services">The services.</param>
            <param name="configuration">The configuration.</param>
        </member>
        <member name="T:Eu.EDelivery.AS4.Fe.Users.IUserService">
            <summary>
            Interface to be implemented be a service to manager users.
            </summary>
        </member>
        <member name="M:Eu.EDelivery.AS4.Fe.Users.IUserService.Get">
            <summary>
            Get a list of all users
            </summary>
            <returns></returns>
        </member>
        <member name="M:Eu.EDelivery.AS4.Fe.Users.IUserService.Create(Eu.EDelivery.AS4.Fe.Users.NewUser)">
            <summary>
            Creates the specified user.
            </summary>
            <param name="user">The user.</param>
            <returns></returns>
        </member>
        <member name="M:Eu.EDelivery.AS4.Fe.Users.IUserService.Update(System.String,Eu.EDelivery.AS4.Fe.Users.UpdateUser)">
            <summary>
            Changes the password.
            </summary>
            <param name="userName">Name of the user.</param>
            <param name="user">The user.</param>
            <returns></returns>
            <exception cref="T:System.ArgumentNullException">user</exception>
            <exception cref="T:System.ArgumentException">Name cannot be empty - Name
            or
            Password cannot be empty - Password</exception>
        </member>
        <member name="M:Eu.EDelivery.AS4.Fe.Users.IUserService.Delete(System.String)">
            <summary>
            Deletes the specified user.
            </summary>
            <param name="user">The user.</param>
            <returns></returns>
            <exception cref="T:System.ArgumentNullException">user</exception>
            <exception cref="T:Eu.EDelivery.AS4.Fe.BusinessException"></exception>
        </member>
        <member name="T:Eu.EDelivery.AS4.Fe.Users.IUserSetup">
            <summary>
            Setup user module
            </summary>
            <seealso cref="T:Eu.EDelivery.AS4.Fe.Modules.IRunAtServicesStartup" />
        </member>
        <member name="T:Eu.EDelivery.AS4.Fe.Users.NewUser">
            <summary>
            New user
            </summary>
            <seealso cref="T:Eu.EDelivery.AS4.Fe.Users.User" />
        </member>
        <member name="P:Eu.EDelivery.AS4.Fe.Users.NewUser.Password">
            <summary>
            Gets or sets the password.
            </summary>
            <value>
            The password.
            </value>
        </member>
        <member name="T:Eu.EDelivery.AS4.Fe.Users.UpdateUser">
            <summary>
            Update user object
            </summary>
        </member>
        <member name="P:Eu.EDelivery.AS4.Fe.Users.UpdateUser.Password">
            <summary>
            Gets or sets the new password.
            </summary>
            <value>
            The password.
            </value>
        </member>
        <member name="P:Eu.EDelivery.AS4.Fe.Users.UpdateUser.Roles">
            <summary>
            Gets or sets the roles.
            </summary>
            <value>
            The roles.
            </value>
        </member>
        <member name="T:Eu.EDelivery.AS4.Fe.Users.User">
            <summary>
                Class representing a user
            </summary>
        </member>
        <member name="P:Eu.EDelivery.AS4.Fe.Users.User.Name">
            <summary>
                Gets or sets the name of the user.
            </summary>
            <value>
                The name.
            </value>
        </member>
        <member name="P:Eu.EDelivery.AS4.Fe.Users.User.Roles">
            <summary>
                Gets or sets the claims.
            </summary>
            <value>
                The claims.
            </value>
        </member>
        <member name="T:Eu.EDelivery.AS4.Fe.Users.UserController">
            <summary>
                Controller to manage users
            </summary>
            <seealso cref="T:Microsoft.AspNetCore.Mvc.Controller" />
        </member>
        <member name="M:Eu.EDelivery.AS4.Fe.Users.UserController.#ctor(Eu.EDelivery.AS4.Fe.Users.IUserService)">
            <summary>
            Initializes a new instance of the <see cref="T:Eu.EDelivery.AS4.Fe.Users.UserController"/> class.
            </summary>
            <param name="userService">The user service.</param>
        </member>
        <member name="M:Eu.EDelivery.AS4.Fe.Users.UserController.Get">
            <summary>
            Get all users
            </summary>
            <returns>List of users</returns>
        </member>
        <member name="M:Eu.EDelivery.AS4.Fe.Users.UserController.Create(Eu.EDelivery.AS4.Fe.Users.NewUser)">
            <summary>
            Creates the specified new user.
            </summary>
            <param name="newUser">The new user.</param>
            <returns></returns>
        </member>
        <member name="M:Eu.EDelivery.AS4.Fe.Users.UserController.Delete(System.String)">
            <summary>
            Delete an existing user.
            </summary>
            <param name="username">The username.</param>
            <returns></returns>
        </member>
        <member name="M:Eu.EDelivery.AS4.Fe.Users.UserController.Update(System.String,Eu.EDelivery.AS4.Fe.Users.UpdateUser)">
            <summary>
            Change a user password
            </summary>
            <param name="username">The username.</param>
            <param name="update">The update.</param>
            <returns></returns>
        </member>
        <member name="T:Eu.EDelivery.AS4.Fe.Users.UsersAutoMapperProfile">
            <summary>
            Setup Users automapper profile
            </summary>
            <seealso cref="T:AutoMapper.Profile" />
        </member>
        <member name="M:Eu.EDelivery.AS4.Fe.Users.UsersAutoMapperProfile.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Eu.EDelivery.AS4.Fe.Users.UsersAutoMapperProfile" /> class.
            </summary>
        </member>
        <member name="T:Eu.EDelivery.AS4.Fe.Users.UserService">
            <summary>
            UserService
            </summary>
            <seealso cref="T:Eu.EDelivery.AS4.Fe.Users.IUserService" />
        </member>
        <member name="M:Eu.EDelivery.AS4.Fe.Users.UserService.#ctor(Microsoft.AspNetCore.Identity.UserManager{Eu.EDelivery.AS4.Fe.Authentication.ApplicationUser},Eu.EDelivery.AS4.Fe.Authentication.ApplicationDbContext,AutoMapper.MapperConfiguration)">
            <summary>
            Initializes a new instance of the <see cref="T:Eu.EDelivery.AS4.Fe.Users.UserService"/> class.
            </summary>
            <param name="userManager">The user manager.</param>
            <param name="context">The context.</param>
            <param name="mapperConfiguration">The mapper configuration.</param>
        </member>
        <member name="M:Eu.EDelivery.AS4.Fe.Users.UserService.Get">
            <summary>
            Get a list of all users
            </summary>
            <returns></returns>
        </member>
        <member name="M:Eu.EDelivery.AS4.Fe.Users.UserService.Create(Eu.EDelivery.AS4.Fe.Users.NewUser)">
            <summary>
            Creates the specified user.
            </summary>
            <param name="user">The user.</param>
            <returns></returns>
        </member>
        <member name="M:Eu.EDelivery.AS4.Fe.Users.UserService.Update(System.String,Eu.EDelivery.AS4.Fe.Users.UpdateUser)">
            <summary>
            Changes the password.
            </summary>
            <param name="userName">Name of the user.</param>
            <param name="user">The user.</param>
            <returns></returns>
            <exception cref="T:System.ArgumentNullException">user</exception>
            <exception cref="T:Eu.EDelivery.AS4.Fe.BusinessException"></exception>
            <exception cref="T:System.ArgumentException">Name cannot be empty - Name
            or
            Password cannot be empty - Password</exception>
        </member>
        <member name="M:Eu.EDelivery.AS4.Fe.Users.UserService.Delete(System.String)">
            <summary>
            Deletes the specified user.
            </summary>
            <param name="user">The user.</param>
            <returns></returns>
            <exception cref="T:System.ArgumentNullException">user</exception>
            <exception cref="T:Eu.EDelivery.AS4.Fe.BusinessException"></exception>
        </member>
        <member name="T:Eu.EDelivery.AS4.Fe.Users.UserSetup">
            <summary>
            Implementation of the user setup module
            </summary>
            <seealso cref="T:Eu.EDelivery.AS4.Fe.Users.IUserSetup" />
        </member>
        <member name="M:Eu.EDelivery.AS4.Fe.Users.UserSetup.Run(Microsoft.Extensions.DependencyInjection.IServiceCollection,Microsoft.Extensions.Configuration.IConfigurationRoot)">
            <summary>
            Runs the specified services.
            </summary>
            <param name="services">The services.</param>
            <param name="configuration">The configuration.</param>
        </member>
    </members>
</doc>
